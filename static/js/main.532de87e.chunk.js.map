{"version":3,"sources":["assets/images/loupe.svg","services/api/api.ts","assets/images/token.png","assets/images/navigation/overview.svg","assets/images/navigation/overview-selected.svg","assets/images/navigation/guardians.svg","assets/images/navigation/guardians-selected.svg","assets/images/navigation/delegators.svg","assets/images/navigation/delegators-selected.svg","assets/images/navbar-logo.svg","assets/images/cpu.svg","assets/images/encrypted.svg","services/api/index.ts","config/env.dev.ts","config/env.prod.ts","serviceWorker.ts","global/enums.ts","redux/types/types.ts","redux/actions/delegator-actions.ts","redux/actions/guardians-actions.ts","routes/routes.ts","components/loaders/big-loader.tsx","components/loaders/text-loader.tsx","components/loaders/list-loader.tsx","components/loading-component/loading-component.tsx","utils/dates.ts","utils/array.ts","utils/delegators.ts","utils/number.ts","screens/deligators/sections/delegators-actions/components/delegator-action.tsx","keys/keys.ts","components/no-data/no-data.tsx","screens/deligators/sections/delegators-actions/deligators-actions.tsx","components/date-format-picker/time-range-selector.tsx","utils/chart.ts","screens/deligators/sections/delegators-stake/components/delegator-stake-chart/chart.tsx","screens/deligators/sections/delegators-stake/components/delegator-stake-chart/delegator-stake-chart.tsx","global/variables.ts","utils/guardians.ts","screens/deligators/sections/delegators-stake/components/delegators-stake-balance/delegators-stake-balance.tsx","utils/routing.ts","screens/deligators/sections/delegators-stake/delegators-stake.tsx","screens/deligators/sections/delegators-reward/delegators-reward.tsx","screens/deligators/components/delegator-search/delegator-search.tsx","components/section-menu/section-menu.tsx","screens/deligators/components/delegator-sections-selector/delegator-section-selector.tsx","screens/deligators/delegators.tsx","utils/navigation.ts","components/navigation-menu/navigation-menu.tsx","screens/guardians/sections/guardian-delegators/components/guardian-delegator/guardian-delegator.tsx","screens/guardians/sections/guardian-delegators/guardian-delegators.tsx","screens/guardians/sections/guardians-stake/components/guardian-stake-chart/chart.tsx","screens/guardians/sections/guardians-stake/components/guardian-stake-chart/guardian-stake-chart.tsx","screens/guardians/sections/guardians-stake/components/guardian-stake-legend/guardian-stake-legend.tsx","screens/guardians/sections/guardians-stake/guardians-stake.tsx","screens/guardians/components/guardian-search/guardian-search.tsx","screens/guardians/components/guardian-section-select/guardian-section-select.tsx","screens/guardians/guardians.tsx","ui/colors.ts","utils/overview.ts","screens/overview/components/overview-section-selector/overview-section-selector.tsx","screens/overview/components/overview-top/overview-top.tsx","components/bar-chart/bar-chart.tsx","screens/overview/sections/overview-stake/components/overview-stake-chart/overview-stake-chart.tsx","redux/actions/overview-actions.ts","screens/overview/sections/overview-stake/components/overview-stake-guardians/overview-stake-guardians.tsx","screens/overview/sections/overview-stake/overview-stake.tsx","screens/overview/overview.tsx","routes/root-router.tsx","app.tsx","redux/reducers/auth-reducer.ts","redux/reducers/delegator.ts","redux/reducers/guardians.ts","redux/reducers/overview.ts","redux/reducers/reducers.ts","redux/store/store.ts","config/env.ts","i18n/i18n.ts","index.tsx","assets/images/copy.svg"],"names":["module","exports","api","ethereumEndpoint","nodeEndpoints","address","getDelegator","this","res","undefined","getGuardian","getGuardians","getOverview","ENV","Boolean","window","location","hostname","match","DelegatorsSections","GuardiansSections","OverviewSections","LoaderType","DeligatorActionsTypes","TimeRangeSelectorOptions","SearchListType","ChartUnit","ChartColors","ChartYaxis","types","SET_DELEGATOR","DELEGATOR_NOT_FOUND","DELEGATOR_LOADING","CLEAR_DELEGATOR","SET_DELEGATOR_CHART_DATA","RESET_DELEGATOR","SET_GUARDIANS","SET_GUARDIAN","GUARDIAN_NOT_FOUND","GUARDIAN_LOADING","SET_GUARDIAN_CHART_DATA","RESET_GUARDIAN","SET_OVERVIEW","SET_CHART_DATA","setDelegator","delegator","dispatch","a","type","payload","delegatorLoading","value","delegatorNotFound","resetDelegator","setGuardianLoading","setGuardianNotFound","resetguardian","routes","overview","main","stake","weights","guardians","rewards","delegators","actions","navigation","BigLoader","className","TextLoader","ListLoader","listElementAmount","Array","apply","map","m","i","key","index","LoadingComponent","loaderType","isLoading","children","TEXT","BIG","LIST","renderContent","generateMonths","limit","dates","moment","subtract","month","generateWeeks","week","generateDays","days","dayOfYear","returnDateNumber","date","unit","MONTH","unix","getMonthNumberFromUnixDate","WEEK","getWeekNumberFromUnixDate","DAY","getDayNumberFromUnixDate","sortByDate","arr","sort","b","x","diff","generateDelegatorsRoutes","t","name","route","replace","STAKE","REWARDS","disabled","ACTIONS","getDelegatorChartData","stake_slices","slice","block_time","hasOwnProperty","datasetObject","format","y","push","datasets","data","color","GRAY","yAxis","Y1","numeral","require","formatNumber","num","convertToString","defaultString","Number","toFixed","toLocaleString","DelegatorActionElement","action","amount","block_number","event","to","currentStake","useTranslation","STAKED","RESTAKED","UNSTAKED","WITHDREW","generateGuardiansActionColors","isDeligated","DELEGATED","src","LinkIcon","alt","generateAction","style","href","target","rel","NoData","DeligatorsActions","useSelector","state","selectedDelegator","delegatorIsLoading","titles","utcOffset","title","TimeRangeSelector","selectCallBack","selected","unitsToHide","options","units","filter","option","includes","filterUnits","onClick","select","getLineChartBaseSettings","maintainAspectRatio","responsive","margin","elements","line","tension","legend","display","layout","padding","right","bottom","left","animation","duration","interaction","mode","tooltips","xPadding","yPadding","titleFontFamily","bodyFontFamily","displayColors","cornerRadius","callbacks","label","tooltipItem","datasetIndex","Math","round","yLabel","labelColor","borderColor","backgroundColor","scales","xAxes","distribution","time","scaleLabel","gridLines","tickMarkLength","drawBorder","zeroLineColor","ticks","autoskip","fontSize","fontFamily","fontColor","yAxes","id","labelString","position","borderDash","zeroLineBorderDash","maxTicksLimit","callback","toUpperCase","generateDatasets","chartData","styles","fill","lineTension","borderCapStyle","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","yAxisID","dataset","Chart","DelegatorStakeChart","useDispatch","delegatorChartData","useEffect","selectChartData","months","weeks","generateDelegatorChartData","generateGuardiansRoutes","guardian","DELEGATORS","getGuardianChartData","dataObject","selfStake","Y2","delegatedStake","YELLOW","GREEN","insertChartDataByType","formatGuardianChartData","datasetsArr","Object","keys","self_stake","n_delegates","delegated_stake","selftStake","getGuardianByAddress","g","DelegatorsStakeBalanceSection","text","TokenImg","DelegatorsStakeBalance","delegatedTo","delegated_to","total_stake","cool_down_stake","non_stake","DelegatorsStake","DelegatorsReward","DelegatorSearch","useClickOutside","ref","hasClickedOutside","useState","inputValue","setInputValue","history","useHistory","params","useParams","pushAddressAndFindDelegator","section","findDelegator","toLowerCase","checkIfLoadDeligator","getDelegatorApi","findDelegatorAction","LoupeImg","onKeyUp","e","keyCode","submit","onChange","onPaste","clipboardData","getData","handlePaste","placeholder","generateClassName","toLocaleLowerCase","SectionMenu","setSelected","newSelected","pathname","DelegatorSectionSelector","Delegators","React","memo","path","render","getAddress","obj","NavigationMenu","selectedSection","setSelectedSection","selectedGuardian","Logo","image","overviewImg","selectedImage","overviewSelectedImg","guardiansImg","guardiansSelectedImg","delegatorsImg","delegatorsSelectedImg","generateNavigationLinks","link","isSelected","GuardianDelegatorElement","CopyImg","GuardianDelegators","guardianIsLoading","settings","getGuardiansLineChartSettings","GuardianStakeChart","guardianChartData","generateGuardiansChartData","GuardianStakeLegend","legends","background","GuardiansStake","GuardianSearch","showResults","setShowResults","findGuardianOnLoad","findGuardian","checkIfLoadDelegator","getGuardianApi","console","log","getGuardianAction","searchByAddress","setGuardianNameAsValue","string","length","list","onFocus","indexOf","result","GuardianSectionSelect","Guardians","overviewguardiansColors","generateOverviewRoutes","WEIGHTS","getGuardianColor","count","getOverviewChartData","overviewData","slices","order","sortedGuardians","propertyName","asc","sortByNumber","guardiansObject","forEach","getSortedGuardiansOrder","datesInUse","orderObject","reorderGuardians","fillEmptyData","previousData","number","converFromNumberToDate","OverviewSectionSelector","OverviewTopSection","textTop","textBottom","imgSrc","btnText","OverviewTop","TotalStakeImg","n_candidates","n_guardians","GuardiansImg","BarChartComponent","addToDataset","colors","effectiveStake","maxBarThickness","barChartData","elem","generateDataset","offset","stacked","OverviewStakeChart","overviewChartData","overviewDataLoding","generateOverviewChartData","setOverviewChartData","OverviewStakeGuadians","OverviewStake","Overview","RootRouter","basename","process","exact","App","getGuardiansApi","getOverviewApi","initialState","token","authReducer","delegatorReducer","guardianNotFound","guardiansReducer","overviewReducer","rootReducer","combineReducers","router","connectRouter","auth","createBrowserHistory","store","createStore","reducers","compose","applyMiddleware","routerMiddleware","reduxThunk","development","env","NODE_ENV","isDev","resources","en","translation","fr","i18n","use","initReactI18next","LanguageDetector","init","supportedLngs","fallbackLng","keySeparator","interpolation","escapeValue","debug","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.532de87e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loupe.ecef733a.svg\";","import { getDelegator, getGuardian, getGuardians, getOverview } from '@orbs-network/pos-analytics-lib';\n\nclass Api {\n    ethereumEndpoint = 'https://mainnet.infura.io/v3/9679dc4f2d724f7997547f05f769d74e';\n    nodeEndpoints = ['https://guardian.v2beta.orbs.com/services/management-service/status'];\n    async getDelegatorApi(address: string) {\n        try {\n            const res = await getDelegator(address, this.ethereumEndpoint);\n            return res;\n        } catch (error) {\n            return undefined;\n        }\n    }\n\n    async getGuardianApi(address: string) {\n        try {\n            const res = await getGuardian(address, this.ethereumEndpoint);\n            return res;\n        } catch (error) {\n            return undefined;\n        }\n    }\n\n    async getGuardiansApi() {\n        try {\n            const res = await getGuardians(this.nodeEndpoints);\n            return res;\n        } catch (error) {\n            return null;\n        }\n    }\n    async getOverviewApi() {\n        try {\n            const res = await getOverview(this.nodeEndpoints, this.ethereumEndpoint);\n            return res;\n        } catch (error) {\n            return null;\n        }\n    }\n}\nexport const api = new Api();\n","module.exports = __webpack_public_path__ + \"static/media/token.51d4bc2c.png\";","module.exports = __webpack_public_path__ + \"static/media/overview.416db91d.svg\";","module.exports = __webpack_public_path__ + \"static/media/overview-selected.57aad41c.svg\";","module.exports = __webpack_public_path__ + \"static/media/guardians.95190aa2.svg\";","module.exports = __webpack_public_path__ + \"static/media/guardians-selected.e200a932.svg\";","module.exports = __webpack_public_path__ + \"static/media/delegators.091557cd.svg\";","module.exports = __webpack_public_path__ + \"static/media/delegators-selected.fe49925e.svg\";","module.exports = __webpack_public_path__ + \"static/media/navbar-logo.863932b6.svg\";","module.exports = __webpack_public_path__ + \"static/media/cpu.3ee6411f.svg\";","module.exports = __webpack_public_path__ + \"static/media/encrypted.fc6fbf16.svg\";","export * from './api';\nexport * from './api.types';\n","export const ENV = {};\n","export const ENV = {};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' }\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","export enum DelegatorsSections {\r\n    STAKE = 'STAKE',\r\n    REWARDS = 'REWARDS',\r\n    ACTIONS = 'ACTIONS'\r\n}\r\n\r\nexport enum GuardiansSections {\r\n    STAKE = 'STAKE',\r\n    REWARDS = 'REWARDS',\r\n    DELEGATORS = 'DELEGATORS'\r\n}\r\n\r\nexport enum OverviewSections {\r\n    STAKE = 'STAKE',\r\n    WEIGHTS = 'WEIGHTS'\r\n}\r\n\r\nexport enum LoaderType {\r\n    TEXT = 'TEXT',\r\n    BIG = 'BIG',\r\n    LIST = 'LIST'\r\n}\r\n\r\nexport enum DeligatorActionsTypes {\r\n    STAKED = 'Staked',\r\n    RESTAKED = 'Restaked',\r\n    WITHDREW = 'Withdrew',\r\n    DELEGATED = 'Delegated',\r\n    UNSTAKED = 'Unstaked'\r\n}\r\n\r\nexport enum TimeRangeSelectorOptions {\r\n    DAYS = 'DAYS',\r\n    WEEKS = 'WEEKS',\r\n    MONTHS = 'MONTHS'\r\n}\r\n\r\nexport enum SearchListType {\r\n    GUARDIAN = 'GUARDIAN',\r\n    DELEGATOR = 'DELEGATOR'\r\n}\r\n\r\nexport enum ChartUnit {\r\n    DAY = 'day',\r\n    MONTH = 'month',\r\n    WEEK = 'week'\r\n}\r\n\r\nexport enum ChartColors {\r\n    YELLOW = '#FFEC29',\r\n    GRAY = '#CF4E81',\r\n    GREEN = '#74DABF'\r\n}\r\n\r\nexport enum ChartYaxis {\r\n    Y1 = 'y1',\r\n    Y2 = 'y2'\r\n}\r\n","import { AuthState } from './auth-types';\r\nimport { DelegatorState } from './delegator-types';\r\nimport { GuardiansState } from './guardians-types';\r\nimport { OverviewState } from './overview-types';\r\n\r\nexport const types = {\r\n    SET_DATA_TO_GLOBAL_REDUCER: 'SET_DATA_TO_GLOBAL_REDUCER',\r\n    LOGIN: 'LOGIN',\r\n\r\n    DELEGATOR: {\r\n        SET_DELEGATOR: 'SET_DELEGATOR',\r\n        DELEGATOR_NOT_FOUND: 'DELEGATOR_NOT_FOUND',\r\n        DELEGATOR_LOADING: 'DELEGATOR_LOADING',\r\n        CLEAR_DELEGATOR: 'CLEAR_DELEGATOR',\r\n        SET_DELEGATOR_CHART_DATA: 'SET_DELEGATOR_CHART_DATA',\r\n        RESET_DELEGATOR: 'RESET_DELEGATOR'\r\n    },\r\n    GUARDIAN: {\r\n        SET_GUARDIANS: 'SET_GUARDIANS',\r\n        SET_GUARDIAN: 'SET_GUARDIAN',\r\n        GUARDIAN_NOT_FOUND: 'GUARDIAN_NOT_FOUND',\r\n        GUARDIAN_LOADING: 'GUARDIAN_LOADING',\r\n        SET_GUARDIAN_CHART_DATA: 'SET_GUARDIAN_CHART_DATA',\r\n        RESET_GUARDIAN: 'RESET_GUARDIAN'\r\n    },\r\n    OVERVIEW: {\r\n        SET_OVERVIEW: 'SET_OVERVIEW',\r\n        SET_CHART_DATA: 'SET_CHART_DATA'\r\n    }\r\n};\r\n\r\nexport interface AppState {\r\n    auth: AuthState;\r\n    delegator: DelegatorState;\r\n    guardians: GuardiansState;\r\n    overview: OverviewState;\r\n}\r\n","import { Delegator } from '@orbs-network/pos-analytics-lib';\r\nimport { Dispatch } from 'redux';\r\nimport { ChartData } from '../../global/types';\r\nimport { api } from '../../services/api';\r\nimport { types } from '../types/types';\r\n\r\nexport const findDelegatorAction = (address: string) => async (dispatch: any) => {\r\n    dispatch(resetDelegator());\r\n    const delegator = await api.getDelegatorApi(address);\r\n    dispatch(delegatorLoading(false));\r\n    if (!delegator) {\r\n        return dispatch(delegatorNotFound(true));\r\n    }\r\n    dispatch(setDelegator(delegator));\r\n};\r\n\r\nconst setDelegator = (delegator: Delegator) => async (dispatch: any) => {\r\n    dispatch({\r\n        type: types.DELEGATOR.SET_DELEGATOR,\r\n        payload: delegator\r\n    });\r\n};\r\n\r\nexport const delegatorLoading = (value: boolean) => async (dispatch: any) => {\r\n    return dispatch({\r\n        type: types.DELEGATOR.DELEGATOR_LOADING,\r\n        payload: value\r\n    });\r\n};\r\n\r\nexport const delegatorNotFound = (value: boolean) => async (dispatch: any) => {\r\n    return dispatch({\r\n        type: types.DELEGATOR.DELEGATOR_NOT_FOUND,\r\n        payload: value\r\n    });\r\n};\r\n\r\nexport const setDelegatorChartData = (chartData: ChartData | undefined) => async (dispatch: Dispatch<any>) => {\r\n    return dispatch({\r\n        type: types.DELEGATOR.SET_DELEGATOR_CHART_DATA,\r\n        payload: chartData\r\n    });\r\n};\r\n\r\nexport const resetDelegator = () => async (dispatch: any) => {\r\n    return dispatch({\r\n        type: types.DELEGATOR.RESET_DELEGATOR\r\n    });\r\n};\r\n","import { ChartData } from '../../global/types';\r\nimport { api } from '../../services/api';\r\nimport { types } from '../types/types';\r\n\r\nexport const getGuardianAction = (address: string) => async (dispatch: any) => {\r\n    dispatch(resetguardian());\r\n    const guardian = await api.getGuardianApi(address);\r\n    dispatch(setGuardianLoading(false));\r\n    if (!guardian) {\r\n        return dispatch(setGuardianNotFound(true));\r\n    }\r\n    console.log(guardian);\r\n    dispatch({\r\n        type: types.GUARDIAN.SET_GUARDIAN,\r\n        payload: guardian\r\n    });\r\n};\r\n\r\nexport const getGuardiansAction = () => async (dispatch: any) => {\r\n    const guardians = await api.getGuardiansApi();\r\n    if (!guardians) return null;\r\n    return dispatch({\r\n        type: types.GUARDIAN.SET_GUARDIANS,\r\n        payload: guardians\r\n    });\r\n};\r\n\r\nexport const setGuardianLoading = (value: boolean) => async (dispatch: any) => {\r\n    return dispatch({\r\n        type: types.GUARDIAN.GUARDIAN_LOADING,\r\n        payload: value\r\n    });\r\n};\r\n\r\nexport const setGuardianNotFound = (value: boolean) => async (dispatch: any) => {\r\n    return dispatch({\r\n        type: types.GUARDIAN.GUARDIAN_NOT_FOUND,\r\n        payload: value\r\n    });\r\n};\r\n\r\nexport const setGuardianChartData = (chartData: ChartData | undefined) => async (dispatch: any) => {\r\n    return dispatch({\r\n        type: types.GUARDIAN.SET_GUARDIAN_CHART_DATA,\r\n        payload: chartData\r\n    });\r\n};\r\n\r\nexport const resetguardian = () => async (dispatch: any) => {\r\n    return dispatch({\r\n        type: types.GUARDIAN.RESET_GUARDIAN\r\n    });\r\n};\r\n","export const routes = {\r\n    overview: {\r\n        main: '/overview/:section?',\r\n        stake: '/overview/stake',\r\n        weights: '/overview/weights'\r\n    },\r\n    guardians: {\r\n        main: '/guardians/:section?/:address?',\r\n        stake: '/guardians/stake/:address?',\r\n        rewards: '/guardians/rewards/:address?',\r\n        delegators: '/guardians/delegators/:address?'\r\n    },\r\n    delegators: {\r\n        main: '/delegators/:section?/:address?',\r\n        stake: '/delegators/stake/:address?',\r\n        rewards: '/delegators/rewards/:address?',\r\n        actions: '/delegators/actions/:address?'\r\n    },\r\n    navigation: '/:section?'\r\n};\r\n","import React from 'react'\r\nimport './loaders.scss';\r\n\r\nexport const BigLoader = () => {\r\n    return (\r\n        <div className='loader loader-big'>\r\n            <figure></figure>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport './loaders.scss';\r\n\r\nexport const TextLoader = () => {\r\n    return (\r\n        <div className='loader loader-text'>\r\n            <figure></figure>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport './loaders.scss';\r\nimport { TextLoader } from './text-loader';\r\n\r\ninterface StateProps {\r\n    listElementAmount: number;\r\n}\r\n\r\nexport const ListLoader = ({listElementAmount}: StateProps) => {\r\n    return (\r\n            <ul className='loader-list'>\r\n                {Array.apply(null, Array(6)).map((m: any, i: number) => {\r\n                    return <li key = {i} className='flex-start-center loader-list-element'>\r\n                        {\r\n                            Array.apply(null, Array(listElementAmount)).map((m: any, index: number) => {\r\n                                return <div key = {index}> <TextLoader /></div>\r\n                            })\r\n                        }\r\n                            \r\n                            \r\n                    </li>\r\n                })}\r\n            </ul>\r\n      \r\n    )\r\n}\r\n\r\n","import React, { Children } from 'react';\r\nimport { LoaderType } from '../../global/enums';\r\nimport { BigLoader } from '../loaders/big-loader';\r\nimport { ListLoader } from '../loaders/list-loader';\r\nimport { TextLoader } from '../loaders/text-loader';\r\n\r\ninterface StateProps {\r\n    loaderType: LoaderType;\r\n    isLoading: boolean;\r\n    children: any;\r\n    listElementAmount?: number;\r\n}\r\n\r\nexport const LoadingComponent = ({ loaderType, isLoading, children, listElementAmount }: StateProps) => {\r\n    const renderContent = () => {\r\n        switch (loaderType) {\r\n            case LoaderType.TEXT:\r\n                return <TextLoader />;\r\n            case LoaderType.BIG:\r\n                return <BigLoader />;\r\n            case LoaderType.LIST:\r\n                if (!listElementAmount) return null;\r\n                return <ListLoader listElementAmount={listElementAmount} />;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    return isLoading ? renderContent() : children;\r\n};\r\n","import { Console } from 'console';\r\nimport moment from 'moment';\r\nimport { ChartUnit } from '../global/enums';\r\n\r\nexport const generateMonths = (limit: number) => {\r\n    let dates: any = {};\r\n    for (let i = 0; i <= limit; i++) {\r\n        const month = moment().subtract(i, 'month').month();\r\n        dates[month] = [];\r\n    }\r\n    return dates;\r\n};\r\n\r\nexport const generateWeeks = (limit: number) => {\r\n    let dates: any = {};\r\n    for (let i = 0; i < limit; i++) {\r\n        const week = moment().subtract(i, 'week').week();\r\n        dates[week] = [];\r\n    }\r\n    return dates;\r\n};\r\n\r\nexport const generateDays = (limit: number) => {\r\n    let days: any = {};\r\n    for (let i = 0; i < limit; i++) {\r\n        const day = moment().subtract(i, 'day').dayOfYear();\r\n        days[day] = [];\r\n    }\r\n    return days;\r\n};\r\n\r\nexport const getDayNumberFromUnixDate = (date: number): number => {\r\n    return moment.unix(date).dayOfYear();\r\n};\r\n\r\nexport const getWeekNumberFromUnixDate = (date: number): number => {\r\n    return moment.unix(date).week();\r\n};\r\n\r\nexport const getMonthNumberFromUnixDate = (date: number): number => {\r\n    return moment.unix(date).month();\r\n};\r\n\r\nexport const returnDateNumber = (date: number, unit: ChartUnit) => {\r\n    switch (unit) {\r\n        case ChartUnit.MONTH:\r\n            return getMonthNumberFromUnixDate(date);\r\n        case ChartUnit.WEEK:\r\n            return getWeekNumberFromUnixDate(date);\r\n        case ChartUnit.DAY:\r\n            return getDayNumberFromUnixDate(date);\r\n        default:\r\n            break;\r\n    }\r\n};\r\n\r\nexport const converFromNumberToDate = (number: number, unit: ChartUnit, format: string): string => {\r\n    switch (unit) {\r\n        case ChartUnit.MONTH:\r\n            return moment().month(number).format(format);\r\n        case ChartUnit.WEEK:\r\n            return moment().week(number).format(format);\r\n        case ChartUnit.DAY:\r\n            return moment().dayOfYear(number).format(format);\r\n        default:\r\n            return moment().format(format);\r\n    }\r\n};\r\n","import moment from 'moment';\r\n\r\nexport const sortByDate = (arr: any) => {\r\n    if (!arr) return;\r\n    return arr.sort((a: any, b: any) => {\r\n        return moment(a.x, 'DD/MM/YYYY').diff(moment(b.x, 'DD/MM/YYYY'));\r\n    });\r\n};\r\n\r\nexport const sortByNumber = (arr: any, propertyName: string, asc?: boolean) => {\r\n    if (!arr) return;\r\n    return arr.sort((a: any, b: any) => {\r\n        return asc ? a[propertyName] - b[propertyName] : b[propertyName] - a[propertyName];\r\n    });\r\n};\r\n","import { Delegator, DelegatorStake } from '@orbs-network/pos-analytics-lib';\r\nimport { TFunction } from 'i18next';\r\nimport { ChartColors, ChartUnit, ChartYaxis, DelegatorsSections, DeligatorActionsTypes } from '../global/enums';\r\nimport { ChartData, ChartDatasetObject, MenuOption } from '../global/types';\r\nimport { routes } from '../routes/routes';\r\nimport moment from 'moment';\r\nimport { generateDays, generateMonths, generateWeeks, returnDateNumber } from './dates';\r\nimport { sortByDate } from './array';\r\nimport { STACK_GRAPH_MONTHS_LIMIT } from '../global/variables';\r\nexport const generateDelegatorsRoutes = (t: TFunction, delegator?: Delegator): MenuOption[] => {\r\n    const address = delegator ? delegator.address : '';\r\n    return [\r\n        {\r\n            name: t('main.stake'),\r\n            route: routes.delegators.stake.replace(':address', address),\r\n            key: DelegatorsSections.STAKE\r\n        },\r\n        {\r\n            name: t('main.rewards'),\r\n            route: routes.delegators.rewards.replace(':address', address),\r\n            key: DelegatorsSections.REWARDS,\r\n            disabled: true\r\n        },\r\n        {\r\n            name: t('main.actions'),\r\n            route: routes.delegators.actions.replace(':address', address),\r\n            key: DelegatorsSections.ACTIONS\r\n        }\r\n    ];\r\n};\r\n\r\nexport const checkIfLoadDeligator = (address?: string, delegator?: Delegator): boolean => {\r\n    if (!address) return false;\r\n    if (!delegator) return true;\r\n    if (delegator.address.toLowerCase() === address.toLowerCase()) return false;\r\n    return true;\r\n};\r\n\r\nexport const getDelegatorChartData = (dates: any, unit: ChartUnit, delegator: Delegator): ChartData => {\r\n    const { stake_slices } = delegator;\r\n    let arr: ChartDatasetObject[] = [];\r\n    stake_slices.map((slice: DelegatorStake) => {\r\n        const { block_time, stake } = slice;\r\n        const date = returnDateNumber(block_time, unit);\r\n        if (!dates.hasOwnProperty(date)) return;\r\n        const datasetObject = {\r\n            x: moment.unix(block_time).format('DD/MM/YYYY'),\r\n            y: stake\r\n        };\r\n        arr.push(datasetObject);\r\n    });\r\n    const dataset = {\r\n        data: sortByDate(arr),\r\n        color: ChartColors.GRAY,\r\n        yAxis: ChartYaxis.Y1\r\n    };\r\n    return {\r\n        datasets: [dataset],\r\n        unit\r\n    };\r\n};\r\n\r\nexport const generateGuardiansActionColors = (event: DeligatorActionsTypes) => {\r\n    switch (event) {\r\n        case DeligatorActionsTypes.STAKED:\r\n            return 'green';\r\n        case DeligatorActionsTypes.RESTAKED:\r\n            return 'green';\r\n        case DeligatorActionsTypes.UNSTAKED:\r\n            return 'red';\r\n        case DeligatorActionsTypes.WITHDREW:\r\n            return 'red';\r\n        default:\r\n            break;\r\n    }\r\n};\r\n\r\nexport const generateDelegatorChartData = (type: ChartUnit, selectedDelegator?: Delegator): ChartData | undefined => {\r\n    if (!selectedDelegator) return;\r\n    let data;\r\n    switch (type) {\r\n        case ChartUnit.MONTH:\r\n            const months = generateMonths(STACK_GRAPH_MONTHS_LIMIT);\r\n            data = getDelegatorChartData(months, ChartUnit.MONTH, selectedDelegator);\r\n            break;\r\n        case ChartUnit.WEEK:\r\n            const weeks = generateWeeks(STACK_GRAPH_MONTHS_LIMIT);\r\n            data = getDelegatorChartData(weeks, ChartUnit.WEEK, selectedDelegator);\r\n            break;\r\n        case ChartUnit.DAY:\r\n            const days = generateDays(20);\r\n            data = getDelegatorChartData(days, ChartUnit.DAY, selectedDelegator);\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return data;\r\n};\r\n\r\nexport const generateDelegatorSearcElement = (delegator: Delegator) => {\r\n    const { address } = delegator;\r\n    return {\r\n        name: address,\r\n        address: address\r\n    };\r\n};\r\n","const numeral = require('numeral');\r\n\r\nexport const formatNumber = (num: number, format: string): string => {\r\n    return numeral(num).format(format);\r\n};\r\n\r\nexport const convertToString = (num?: number, defaultString?: string): number | string => {\r\n    if (!num) return defaultString || '0';\r\n    return Number(num.toFixed(0)).toLocaleString();\r\n};\r\n","import { DelegatorAction } from '@orbs-network/pos-analytics-lib';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { DeligatorActionsTypes } from '../../../../../global/enums';\r\nimport { routes } from '../../../../../routes/routes';\r\nimport { generateGuardiansActionColors } from '../../../../../utils/delegators';\r\nimport LinkIcon from '../../../../../assets/images/copy.svg';\r\nimport { convertToString } from '../../../../../utils/number';\r\nimport { ETHERSCAN_BLOCK_ADDRESS } from '../../../../../keys/keys';\r\nimport moment from 'moment';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\ninterface StateProps {\r\n    action: DelegatorAction;\r\n}\r\n\r\nexport const DelegatorActionElement = ({ action }: StateProps) => {\r\n    const { amount, block_time, block_number, event, to, currentStake } = action;\r\n    const { t } = useTranslation();\r\n\r\n    const generateAction = () => {\r\n        const isDeligated = event === DeligatorActionsTypes.DELEGATED;\r\n\r\n        if (isDeligated && to) {\r\n            return (\r\n                <div className=\"list-item\">\r\n                    {isDeligated ? <p>{t('delegators.delegatedTo')}</p> : <p>{event}</p>}\r\n                    <section className=\"list-item-tooltip\">\r\n                        <Link to={routes.guardians.stake.replace(':address', to)} className=\"flex-start-center\">\r\n                            <p className=\"text-overflow\">{to}</p>\r\n                            <figure className=\"flex-start-center\">\r\n                                {to} <img src={LinkIcon} alt=\"\" />\r\n                            </figure>\r\n                        </Link>\r\n                    </section>\r\n                </div>\r\n            );\r\n        }\r\n        return <p className=\"list-item\">{event}</p>;\r\n    };\r\n    const color = generateGuardiansActionColors(event as DeligatorActionsTypes);\r\n    return (\r\n        <li className=\"flex-start-center\">\r\n            {generateAction()}\r\n            <p className=\"list-item\" style={{ color }}>\r\n                {convertToString(amount, '-')}\r\n            </p>\r\n            <p className=\"list-item\">{convertToString(currentStake)}</p>\r\n            <a\r\n                href={`${ETHERSCAN_BLOCK_ADDRESS}/${block_number}`}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                className=\"list-item\">\r\n                <p>{block_number}</p>\r\n            </a>\r\n            <p className=\"list-item\">{moment.unix(block_time).format('YYYY-MM-DD HH:mm')}</p>\r\n        </li>\r\n    );\r\n};\r\n","export const API = '';\r\nexport const ETHERSCAN_BLOCK_ADDRESS = 'https://etherscan.io/block';\r\n","import React from 'react'\r\nimport { useTranslation } from 'react-i18next'\r\nimport  './no-data.scss';\r\n\r\nexport const NoData = () => {\r\n    const {t} = useTranslation()\r\n    return (\r\n        <div className='no-data flex-center'>\r\n           <p> {t('main.noData')}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState } from '../../../../redux/types/types';\r\nimport moment from 'moment';\r\nimport './deligators-actions.scss';\r\nimport { LoadingComponent } from '../../../../components/loading-component/loading-component';\r\nimport { LoaderType } from '../../../../global/enums';\r\nimport { DelegatorAction } from '@orbs-network/pos-analytics-lib';\r\nimport { DelegatorActionElement } from './components/delegator-action';\r\nimport { NoData } from '../../../../components/no-data/no-data';\r\nimport { sortByDate } from '../../../../utils/array';\r\n\r\nexport const DeligatorsActions = () => {\r\n    const { selectedDelegator, delegatorIsLoading } = useSelector((state: AppState) => state.delegator);\r\n    const titles = ['Action', 'Amount','Current stake','Block #', `Time (GMT+${moment(moment().utcOffset()).format('H')})`];\r\n\r\n    return (\r\n        <div className=\"deligators-actions\">\r\n            <div className=\"list deligators-actions-list\">\r\n               {selectedDelegator &&  <header className=\"list-header flex-start-center\">\r\n                    {titles.map((title: any, index: number) => {\r\n                        return (\r\n                            <h3 key={index} className=\"list-item\">\r\n                                {title}\r\n                            </h3>\r\n                        );\r\n                    })}\r\n                </header>}\r\n                <LoadingComponent isLoading={delegatorIsLoading} loaderType={LoaderType.LIST} listElementAmount={4}>\r\n                    <ul>\r\n                        {selectedDelegator && selectedDelegator.actions ? (\r\n                            sortByDate(selectedDelegator.actions).map((action: DelegatorAction, index: number) => {\r\n                                return <DelegatorActionElement action={action} key={index} />;\r\n                            })\r\n                        ) : (\r\n                            <NoData />\r\n                        )}\r\n                    </ul>\r\n                </LoadingComponent>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react'\r\nimport { useTranslation } from 'react-i18next';\r\nimport { ChartUnit } from '../../global/enums';\r\nimport './time-range-selector.scss';\r\n\r\ninterface Option {\r\n    name: string;\r\n    unit: ChartUnit;\r\n   \r\n}\r\ninterface StateProps {\r\n    selectCallBack: (value: ChartUnit) => void;\r\n    selected: ChartUnit;\r\n    unitsToHide?:ChartUnit[]\r\n}\r\n\r\nconst filterUnits = ( units:Option[],   unitsToHide?:ChartUnit []) => {\r\n        if(!unitsToHide) return units;\r\n         return units.filter((option: Option) => !unitsToHide.includes(option.unit) )\r\n}\r\n\r\nexport const TimeRangeSelector = ({selectCallBack, selected, unitsToHide}: StateProps ) =>  {\r\n    const {t} = useTranslation()\r\n    const options = [{name:t('main.months'), unit: ChartUnit.MONTH},{name:t('main.weeks'), unit: ChartUnit.WEEK},{name:t('main.days'), unit: ChartUnit.DAY}]\r\n\r\n    const select = (option: Option) => {\r\n        selectCallBack(option.unit)\r\n    }\r\n    \r\n    return (\r\n        <div className='time-range-selector flex-start-center'>\r\n               {filterUnits(options, unitsToHide ).map((option: Option, index: number) => {\r\n                   const className = selected === option.unit ? 'time-range-selector-btn time-range-selector-selected' : 'time-range-selector-btn'\r\n                   return <button \r\n                    onClick = {() => select(option)}\r\n                   className={className} key = {index}>{option.name}</button>\r\n               })}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import { TFunction } from 'i18next';\r\nimport { ChartUnit, ChartYaxis } from '../global/enums';\r\nimport { ChartData, ChartDataset } from '../global/types';\r\nimport { convertToString, formatNumber } from './number';\r\n\r\nexport const getGuardiansLineChartSettings = (unit: ChartUnit, t: TFunction) => {\r\n    const settings = getLineChartBaseSettings(unit);\r\n    settings.layout.padding.left = 20;\r\n    settings.layout.padding.right = 20;\r\n    const yAxis: any = {\r\n        id: ChartYaxis.Y2,\r\n        position: 'right',\r\n        display: true,\r\n        gridLines: {\r\n            display: true,\r\n            color: 'rgba(255,99,132,0.2)',\r\n            borderDash: [5],\r\n            zeroLineBorderDash: [5],\r\n            zeroLineColor: 'rgba(255,99,132,0.2)',\r\n            drawBorder: false\r\n        },\r\n        ticks: {\r\n            maxTicksLimit: 7,\r\n            fontSize: 12,\r\n            fontFamily: 'Montserrat',\r\n            fontColor: '#666666',\r\n            callback: function (value: number) {\r\n                return formatNumber(value, '0.0a').toUpperCase();\r\n            },\r\n            padding: 15\r\n        }\r\n    };\r\n    settings.scales.yAxes.push(yAxis);\r\n    return settings;\r\n};\r\n\r\nexport const getLineChartBaseSettings = (unit: ChartUnit) => {\r\n    return {\r\n        maintainAspectRatio: false,\r\n        responsive: true,\r\n        margin: 0,\r\n        type: 'line',\r\n        elements: {\r\n            line: {\r\n                tension: 0\r\n            }\r\n        },\r\n        legend: {\r\n            display: false\r\n        },\r\n        title: {\r\n            display: false\r\n        },\r\n        layout: {\r\n            padding: {\r\n                right: 10,\r\n                bottom: 3,\r\n                left: 0\r\n            }\r\n        },\r\n        animation: {\r\n            duration: 0\r\n        },\r\n        interaction: {\r\n            mode: 'index'\r\n        },\r\n        tooltips: {\r\n            xPadding: 10,\r\n            yPadding: 10,\r\n            titleFontFamily: 'Montserrat',\r\n            bodyFontFamily: 'Montserrat',\r\n            displayColors: false,\r\n            cornerRadius: 2,\r\n            callbacks: {\r\n                label: function (tooltipItem: any, data: any) {\r\n                    var label = data.datasets[tooltipItem.datasetIndex].label;\r\n                    label += Math.round(tooltipItem.yLabel * 100) / 100;\r\n                    return convertToString(Math.round(tooltipItem.yLabel * 100) / 100);\r\n                },\r\n                labelColor: function () {\r\n                    return {\r\n                        borderColor: 'transparent',\r\n                        backgroundColor: 'transparent'\r\n                    };\r\n                }\r\n            }\r\n        },\r\n        scales: {\r\n            xAxes: [\r\n                {\r\n                    distribution: 'linear',\r\n                    type: 'time',\r\n                    time: {\r\n                        format: 'DD/MM/',\r\n                        unit\r\n                    },\r\n                    scaleLabel: {\r\n                        display: false\r\n                    },\r\n                    gridLines: {\r\n                        tickMarkLength: 10,\r\n                        display: false,\r\n                        drawBorder: false,\r\n                        zeroLineColor: 'rgba(255,99,132,0.2)'\r\n                    },\r\n                    ticks: {\r\n                        autoskip: true,\r\n                        padding: 5,\r\n                        fontSize: 12,\r\n                        fontFamily: 'Montserrat',\r\n                        fontColor: '#666666'\r\n                    }\r\n                }\r\n            ],\r\n            yAxes: [\r\n                {\r\n                    id: ChartYaxis.Y1,\r\n                    scaleLabel: {\r\n                        display: false,\r\n                        labelString: '',\r\n                        fontSize: 12,\r\n                        fontFamily: 'Montserrat',\r\n                        fontColor: '#666666'\r\n                    },\r\n                    position: 'left',\r\n                    gridLines: {\r\n                        display: true,\r\n                        color: 'rgba(255,99,132,0.2)',\r\n                        borderDash: [5],\r\n                        zeroLineBorderDash: [5],\r\n                        zeroLineColor: 'rgba(255,99,132,0.2)',\r\n                        drawBorder: false\r\n                    },\r\n\r\n                    ticks: {\r\n                        autoskip: true,\r\n                        maxTicksLimit: 7,\r\n                        fontSize: 12,\r\n                        fontFamily: 'Montserrat',\r\n                        fontColor: '#666666',\r\n                        callback: function (value: number) {\r\n                            return formatNumber(value, '0.0a').toUpperCase();\r\n                        },\r\n                        padding: 15\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    };\r\n};\r\n\r\nexport const getLineChartBaseStyles = () => {\r\n    return {\r\n        label: '0',\r\n        fill: false,\r\n        lineTension: 0,\r\n        backgroundColor: '',\r\n        borderColor: '',\r\n        borderCapStyle: 'butt',\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: 'miter',\r\n        pointBorderColor: '',\r\n        pointBackgroundColor: '',\r\n        pointBorderWidth: 7,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: '',\r\n        pointHoverBorderColor: '',\r\n        pointHoverBorderWidth: 1,\r\n        pointRadius: 2,\r\n        pointHitRadius: 10,\r\n        yAxisID: ChartYaxis.Y1\r\n    };\r\n};\r\n\r\nexport const generateDatasets = (chartData: ChartData) => {\r\n    const styles = getLineChartBaseStyles();\r\n    return chartData.datasets.map((dataset: ChartDataset, index: number) => {\r\n        const { color, yAxis, data } = dataset;\r\n        const style = styles;\r\n        style.label = `${index}`;\r\n        style.borderColor = color;\r\n        style.pointBorderColor = color;\r\n        style.pointBackgroundColor = color;\r\n        style.pointHoverBackgroundColor = color;\r\n        style.pointHoverBorderColor = color;\r\n        style.yAxisID = yAxis;\r\n        return {\r\n            data,\r\n            ...style\r\n        };\r\n    });\r\n};\r\n","import React from 'react'\r\nimport { Line } from 'react-chartjs-2';\r\nimport { ChartData } from '../../../../../../global/types';\r\nimport { generateDatasets, getLineChartBaseSettings } from '../../../../../../utils/chart';\r\n\r\ninterface StateProps {\r\n    chartData: ChartData;\r\n}\r\n\r\nexport const Chart = ({ chartData }: StateProps) => {\r\n    const data = {\r\n        datasets: generateDatasets(chartData)\r\n    };\r\n    const options = getLineChartBaseSettings(chartData.unit);\r\n    return <Line data={data} options={options} />;\r\n};","import React, { useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { TimeRangeSelector } from '../../../../../../components/date-format-picker/time-range-selector';\r\nimport { LoadingComponent } from '../../../../../../components/loading-component/loading-component';\r\nimport { NoData } from '../../../../../../components/no-data/no-data';\r\nimport { ChartUnit, LoaderType } from '../../../../../../global/enums';\r\nimport { setDelegatorChartData } from '../../../../../../redux/actions/actions';\r\nimport { AppState } from '../../../../../../redux/types/types';\r\nimport { generateDelegatorChartData } from '../../../../../../utils/delegators';\r\nimport { Chart } from './chart';\r\nimport './delegator-stake-chart.scss';\r\n\r\n\r\n\r\nexport const DelegatorStakeChart = () => {\r\n    const dispatch = useDispatch();\r\n    const { selectedDelegator, delegatorIsLoading, delegatorChartData } = useSelector(\r\n        (state: AppState) => state.delegator\r\n    );\r\n    const { t } = useTranslation();\r\n    useEffect(() => {\r\n        if (delegatorChartData) return;\r\n        selectChartData(ChartUnit.MONTH);\r\n    }, [selectedDelegator && selectedDelegator.address]);\r\n\r\n    const selectChartData = (unit: ChartUnit) => {\r\n        const data = generateDelegatorChartData(unit, selectedDelegator);\r\n        dispatch(setDelegatorChartData(data));\r\n    };\r\n\r\n    return (\r\n        <div className=\"delegator-stake-chart\">\r\n            <LoadingComponent loaderType={LoaderType.BIG} isLoading={delegatorIsLoading && !delegatorChartData}>\r\n                {delegatorChartData ? (\r\n                    <>\r\n                        <header className=\"flex-between\">\r\n                            <h4>{t('delegators.stakeChangeOverTime')}</h4>\r\n                            <TimeRangeSelector selected={delegatorChartData.unit} selectCallBack={selectChartData} />\r\n                        </header>\r\n                        <div className=\"line-chart\">\r\n                            <Chart chartData={delegatorChartData} />\r\n                        </div>\r\n                    </>\r\n                ) : null}\r\n            </LoadingComponent>\r\n            {!delegatorIsLoading && !selectedDelegator && <NoData />}\r\n        </div>\r\n    );\r\n};\r\n","export const STACK_GRAPH_MONTHS_LIMIT = 9;\r\nexport const DATE_FORMAT = 'DD/MM/YYYY';\r\nexport const OVERVIEW_CHART_LIMIT = 8;\r\n","import { TFunction } from 'i18next';\r\nimport { ChartData, MenuOption } from '../global/types';\r\nimport { routes } from '../routes/routes';\r\nimport { ChartColors, ChartUnit, ChartYaxis, GuardiansSections } from '../global/enums';\r\nimport { Guardian, GuardianInfo, GuardianStake } from '@orbs-network/pos-analytics-lib';\r\nimport { generateDays, generateMonths, generateWeeks, returnDateNumber } from './dates';\r\nimport { STACK_GRAPH_MONTHS_LIMIT } from '../global/variables';\r\nimport moment from 'moment';\r\nexport const generateGuardiansRoutes = (t: TFunction, guardian?: GuardianInfo): MenuOption[] => {\r\n    const address = guardian ? guardian.address : '';\r\n    return [\r\n        {\r\n            name: t('main.stake'),\r\n            route: routes.guardians.stake.replace(':address', address),\r\n            key: GuardiansSections.STAKE\r\n        },\r\n        {\r\n            name: t('main.rewards'),\r\n            route: routes.guardians.rewards.replace(':address', address),\r\n            key: GuardiansSections.REWARDS,\r\n            disabled: true\r\n        },\r\n        {\r\n            name: t('main.delegetors'),\r\n            route: routes.guardians.delegators.replace(':address', address),\r\n            key: GuardiansSections.DELEGATORS\r\n        }\r\n    ];\r\n};\r\n\r\nexport const checkIfLoadDelegator = (address?: string, guardian?: GuardianInfo): boolean => {\r\n    if (!address) return false;\r\n    if (guardian && guardian.address === address) return false;\r\n    return true;\r\n};\r\n\r\nconst generateObject = () => {\r\n    return {\r\n        selfStake: {\r\n            data: [],\r\n            color: ChartColors.GRAY,\r\n            yAxis: ChartYaxis.Y2\r\n        },\r\n        delegatedStake: {\r\n            data: [],\r\n            color: ChartColors.YELLOW,\r\n            yAxis: ChartYaxis.Y2\r\n        },\r\n        delegators: {\r\n            data: [],\r\n            color: ChartColors.GREEN,\r\n            yAxis: ChartYaxis.Y1\r\n        }\r\n    };\r\n};\r\nexport const getGuardianChartData = (months: any, unit: ChartUnit, guardian: GuardianInfo): ChartData => {\r\n    let dataObject: any = generateObject();\r\n    const { stake_slices } = guardian;\r\n    stake_slices.map((slice: GuardianStake) => {\r\n        const { block_time } = slice;\r\n        const date = returnDateNumber(block_time, unit);\r\n        if (!months.hasOwnProperty(date)) return;\r\n        dataObject = insertChartDataByType(dataObject, slice);\r\n    });\r\n    return formatGuardianChartData(dataObject, unit);\r\n};\r\n\r\nexport const formatGuardianChartData = (data: any, unit: ChartUnit) => {\r\n    let datasetsArr: any = [];\r\n    Object.keys(data).map(function (key) {\r\n        const dataset = data[key];\r\n        datasetsArr.push(dataset);\r\n    });\r\n    const obj = {\r\n        datasets: datasetsArr,\r\n        unit\r\n    };\r\n    return obj;\r\n};\r\n\r\nconst insertChartDataByType = (data: any, slice: GuardianStake): any => {\r\n    const { self_stake, n_delegates, block_time, delegated_stake } = slice;\r\n    const x = moment.unix(block_time).format('DD/MM/YYYY');\r\n    const selftStake = {\r\n        x,\r\n        y: self_stake\r\n    };\r\n    const delegators = {\r\n        x,\r\n        y: n_delegates\r\n    };\r\n    const delegatedStake = {\r\n        x,\r\n        y: delegated_stake\r\n    };\r\n    data.selfStake.data.push(selftStake);\r\n    data.delegators.data.push(delegators);\r\n    data.delegatedStake.data.push(delegatedStake);\r\n    return data;\r\n};\r\n\r\nexport const generateGuardiansChartData = (type: ChartUnit, selectedGuardian?: GuardianInfo) => {\r\n    if (!selectedGuardian) return;\r\n    let data;\r\n    switch (type) {\r\n        case ChartUnit.MONTH:\r\n            const months = generateMonths(STACK_GRAPH_MONTHS_LIMIT);\r\n            data = getGuardianChartData(months, ChartUnit.MONTH, selectedGuardian);\r\n            break;\r\n        case ChartUnit.WEEK:\r\n            const weeks = generateWeeks(STACK_GRAPH_MONTHS_LIMIT);\r\n            data = getGuardianChartData(weeks, ChartUnit.WEEK, selectedGuardian);\r\n            break;\r\n        case ChartUnit.DAY:\r\n            const days = generateDays(STACK_GRAPH_MONTHS_LIMIT);\r\n            data = getGuardianChartData(days, ChartUnit.DAY, selectedGuardian);\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return data;\r\n};\r\n\r\nexport const getGuardianByAddress = (guardians?: Guardian[], address?: string): Guardian | undefined => {\r\n    if (!guardians || !address) return;\r\n    const guardian = guardians.filter((g: Guardian) => {\r\n        return g.address === address;\r\n    })[0];\r\n    return guardian;\r\n};\r\n\r\nexport const filterGuardians = (list: Guardian[], value: string) => {\r\n    if (!value || !list) return list || [];\r\n    const filtered = list.filter((guardian: Guardian) => {\r\n        const { name, address } = guardian;\r\n        const string = `${name} ${address}`;\r\n        return string.toLowerCase().indexOf(value.toLowerCase()) > -1;\r\n    });\r\n    return filtered || [];\r\n};\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { LoadingComponent } from '../../../../../../components/loading-component/loading-component';\r\nimport { LoaderType } from '../../../../../../global/enums';\r\nimport { AppState } from '../../../../../../redux/types/types';\r\nimport { getGuardianByAddress } from '../../../../../../utils/guardians';\r\nimport { convertToString } from '../../../../../../utils/number';\r\nimport { routeToGuardian } from '../../../../../../utils/routing';\r\nimport TokenImg from '../../../../../../assets/images/token.png';\r\nimport { useTranslation } from 'react-i18next';\r\nimport './delegators-stake-balance.scss';\r\n\r\ninterface StateProps {\r\n    isLoading: boolean;\r\n    text: string;\r\n    data: string | number;\r\n}\r\n\r\nconst DelegatorsStakeBalanceSection = ({ isLoading, text, data }: StateProps) => {\r\n    return (\r\n        <div className=\"delegators-stake-balance-section flex-column\">\r\n            <h4 className=\"one-line capitalize\">{text}</h4>\r\n            <LoadingComponent loaderType={LoaderType.TEXT} isLoading={isLoading}>\r\n                <div className=\"flex-start-center\">\r\n                    <p className=\"delegators-stake-balance-bold\">{data}</p>\r\n                    <img src={TokenImg} alt=\"orbs img\" className=\"delegators-stake-balance-img\" />\r\n                </div>\r\n            </LoadingComponent>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const DelegatorsStakeBalance = () => {\r\n    const { selectedDelegator, delegatorIsLoading } = useSelector((state: AppState) => state.delegator);\r\n    const { guardians } = useSelector((state: AppState) => state.guardians);\r\n    const { t } = useTranslation();\r\n    const delegatedTo = getGuardianByAddress(guardians, selectedDelegator?.delegated_to)?.name;\r\n\r\n    return (\r\n        <section className=\"delegators-stake-balance flex-start\">\r\n            <DelegatorsStakeBalanceSection\r\n                data={convertToString(selectedDelegator?.total_stake)}\r\n                isLoading={delegatorIsLoading}\r\n                text={t('main.stake')}\r\n            />\r\n            <DelegatorsStakeBalanceSection\r\n                data={convertToString(selectedDelegator?.cool_down_stake)}\r\n                isLoading={delegatorIsLoading}\r\n                text={t('delegators.cooldown')}\r\n            />\r\n            <DelegatorsStakeBalanceSection\r\n                data={convertToString(selectedDelegator?.non_stake)}\r\n                isLoading={delegatorIsLoading}\r\n                text={t('delegators.nonStakedBalance')}\r\n            />\r\n            <div className=\"delegators-stake-balance-section flex-column text-overflow\">\r\n                <h4>{t('delegators.delegatedTo')}</h4>\r\n                <LoadingComponent loaderType={LoaderType.TEXT} isLoading={delegatorIsLoading}>\r\n                  {delegatedTo ?   <Link to={routeToGuardian(selectedDelegator?.delegated_to)}>\r\n                        <h5 className=\"text-overflow\">{delegatedTo}</h5>\r\n                        <small className=\"text-overflow delegators-stake-balance-small\">\r\n                            {selectedDelegator?.delegated_to}\r\n                        </small>\r\n                    </Link> :  <p className=\"delegators-stake-balance-bold\">-</p>}\r\n                </LoadingComponent>\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n","import { routes } from '../routes/routes';\r\n\r\nexport const routeToGuardian = (address?: string): string => {\r\n    if (!address) return '';\r\n    return routes.guardians.stake.replace(':address', address);\r\n};\r\n\r\nexport const routeToDelegator = (address?: string): string => {\r\n    if (!address) return '';\r\n    return routes.delegators.stake.replace(':address', address);\r\n};\r\n","import React from 'react';\r\nimport { DelegatorStakeChart } from './components/delegator-stake-chart/delegator-stake-chart';\r\nimport { DelegatorsStakeBalance } from './components/delegators-stake-balance/delegators-stake-balance';\r\n\r\nimport './delegators-stake.scss';\r\n\r\n\r\nexport const DelegatorsStake = () => {\r\n    return (\r\n        <div className=\"delegators-stake\">\r\n            <DelegatorsStakeBalance />\r\n            <DelegatorStakeChart />\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react'\r\n\r\nexport const DelegatorsReward = () =>  {\r\n    return (\r\n        <div>\r\n            reward\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { RouteParams } from '../../../../global/types';\r\nimport { findDelegatorAction } from '../../../../redux/actions/actions';\r\nimport { AppState } from '../../../../redux/types/types';\r\nimport { routes } from '../../../../routes/routes';\r\nimport { checkIfLoadDeligator } from '../../../../utils/delegators';\r\nimport { useClickOutside } from 'react-click-outside-hook';\r\nimport LoupeImg from '../../../../assets/images/loupe.svg';\r\n\r\nexport const DelegatorSearch = () => {\r\n    const { selectedDelegator, delegatorNotFound } = useSelector((state: AppState) => state.delegator);\r\n    const [ref, hasClickedOutside] = useClickOutside();\r\n    const [inputValue, setInputValue] = useState<string>('');\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const params: RouteParams = useParams();\r\n    const { t } = useTranslation();\r\n\r\n    const pushAddressAndFindDelegator = (address: string) => {\r\n        const { section } = params;\r\n        history.push(routes.delegators.main.replace(':section?', section).replace(':address', address));\r\n        findDelegator(address);\r\n    };\r\n    useEffect(() => {\r\n        const { address } = params;\r\n        if (hasClickedOutside) {\r\n            if (!address) return;\r\n            setInputValue(address);\r\n        }\r\n    }, [hasClickedOutside]);\r\n\r\n    useEffect(() => {\r\n        const { address } = params;\r\n        if (!address || inputValue) return;\r\n        setInputValue(address);\r\n    }, [params.address]);\r\n\r\n    const findDelegator = (address: string) => {\r\n        const LoadDelegator = checkIfLoadDeligator(address, selectedDelegator);\r\n        if (LoadDelegator) {\r\n            dispatch(findDelegatorAction(address));\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const { address } = params;\r\n        if (!address) return;\r\n        findDelegator(address);\r\n    }, []);\r\n\r\n    const handlePaste = (e: React.ClipboardEvent<HTMLInputElement>) => {\r\n        const value = e.clipboardData.getData('Text');\r\n        pushAddressAndFindDelegator(value);\r\n    };\r\n\r\n    const submit = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (!inputValue) return;\r\n        if (e.key === 'Enter' || e.keyCode === 13) {\r\n            pushAddressAndFindDelegator(inputValue);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"delegator-search search-input flex-column\">\r\n            <p className=\"search-input-title\">{t('main.address')}</p>\r\n            <section className=\"search-input-box\" ref={ref}>\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"search-input-box-btn flex-center\"\r\n                    onClick={() => pushAddressAndFindDelegator(inputValue)}>\r\n                    <img src={LoupeImg} alt=\"\" />\r\n                </button>\r\n                <input\r\n                    onKeyUp={(e: React.KeyboardEvent<HTMLInputElement>) => submit(e)}\r\n                    type=\"text\"\r\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => setInputValue(e.target.value)}\r\n                    value={inputValue}\r\n                    onPaste={(e: React.ClipboardEvent<HTMLInputElement>) => handlePaste(e)}\r\n                    placeholder = {t('delegators.inputPlaceholder')}\r\n                />\r\n            </section>\r\n            {delegatorNotFound && <p className=\"search-input-not-found\">{t('delegators.notFound')}</p>}\r\n        </div>\r\n    );\r\n};\r\n","import React, { FunctionComponent as Component, useEffect, useState } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport { DelegatorsSections, GuardiansSections, OverviewSections } from '../../global/enums';\r\nimport { MenuOption, RouteParams } from '../../global/types';\r\nimport './section-menu.scss';\r\n\r\ninterface Props {\r\n    selected: string | null;\r\n    disabled?: boolean;\r\n    key: DelegatorsSections | GuardiansSections | OverviewSections;\r\n}\r\n\r\nconst generateClassName = ({ key, selected, disabled }: Props): string => {\r\n    let className = `flex-center section-menu-element`;\r\n    const isSelected = key.toLocaleLowerCase() === selected;\r\n    if (isSelected) {\r\n        className = `${className} section-menu-element-selected`;\r\n    }\r\n    if (disabled) {\r\n        className = `${className} section-menu-element-disabled`;\r\n    }\r\n    return className;\r\n};\r\n\r\ninterface StateProps {\r\n    options: MenuOption[];\r\n}\r\n\r\nexport const SectionMenu: Component<StateProps> = ({ options }: StateProps) => {\r\n    const [selected, setSelected] = useState<string | null>(null);\r\n    const params: RouteParams = useParams();\r\n    useEffect(() => {\r\n        const newSelected = params.section;\r\n        setSelected(newSelected);\r\n    }, [window.location.pathname]);\r\n\r\n    return (\r\n        <ul className=\"section-menu flex-start\">\r\n            {options.map((option: MenuOption, index: number) => {\r\n                const { route, key, name, disabled } = option;\r\n\r\n                return (\r\n                    <li key={index} className={generateClassName({ key, selected, disabled })}>\r\n                        <Link to={route} className=\"flex-center\">\r\n                            <p className=\"capitalize\"> {name}</p>\r\n                        </Link>\r\n                    </li>\r\n                );\r\n            })}\r\n        </ul>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { SectionMenu } from \"../../../../components/section-menu/section-menu\";\r\nimport { AppState } from \"../../../../redux/types/types\";\r\nimport { generateDelegatorsRoutes } from \"../../../../utils/delegators\";\r\n\r\nexport const DelegatorSectionSelector = () => {\r\n    const { t } = useTranslation();\r\n        const { selectedDelegator } = useSelector((state: AppState) => state.delegator);\r\n    return <SectionMenu options={generateDelegatorsRoutes(t, selectedDelegator)} />\r\n}","import React from 'react';\r\nimport { routes } from '../../routes/routes';\r\nimport { Route} from 'react-router-dom';\r\nimport { DeligatorsActions } from './sections/delegators-actions/deligators-actions';\r\nimport { DelegatorsStake } from './sections/delegators-stake/delegators-stake';\r\nimport { DelegatorsReward } from './sections/delegators-reward/delegators-reward';\r\nimport './delegators.scss';\r\nimport { DelegatorSearch } from './components/delegator-search/delegator-search';\r\nimport { DelegatorSectionSelector } from './components/delegator-sections-selector/delegator-section-selector';\r\n\r\n const DelegatorsComponent = () => {\r\n    return (\r\n        <div className=\"delegators screen\">\r\n          <DelegatorSearch />\r\n            <div className=\"screen-section\">\r\n                <DelegatorSectionSelector />\r\n                <div className=\"screen-section-container\">\r\n                    <Route path={routes.delegators.stake} render={() => <DelegatorsStake />} />\r\n                    <Route path={routes.delegators.rewards} render={() => <DelegatorsReward />} />\r\n                    <Route path={routes.delegators.actions} render={() => <DeligatorsActions />} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const Delegators = React.memo(DelegatorsComponent)","import { TFunction } from 'i18next';\r\nimport { routes } from '../routes/routes';\r\nimport deligatorsIcon from '../assets/images/overview-icon.svg';\r\nimport overviewIcon from '../assets/images/guardians-icon.svg';\r\nimport guardiansIcon from '../assets/images/deligators-icon.svg';\r\nimport { NavigationLink } from '../global/types';\r\nimport { Delegator, GuardianInfo } from '@orbs-network/pos-analytics-lib';\r\n\r\nimport overviewImg from '../assets/images/navigation/overview.svg';\r\nimport overviewSelectedImg from '../assets/images/navigation/overview-selected.svg';\r\n\r\nimport guardiansImg from '../assets/images/navigation/guardians.svg';\r\nimport guardiansSelectedImg from '../assets/images/navigation/guardians-selected.svg';\r\n\r\nimport delegatorsImg from '../assets/images/navigation/delegators.svg';\r\nimport delegatorsSelectedImg from '../assets/images/navigation/delegators-selected.svg';\r\n\r\nconst getAddress = (obj?: Delegator | GuardianInfo) => {\r\n    if (!obj) return '';\r\n    const { address } = obj;\r\n    if (!address) return '';\r\n    return address;\r\n};\r\n\r\nexport const generateNavigationLinks = (\r\n    t: TFunction,\r\n    delegator?: Delegator,\r\n    guardian?: GuardianInfo\r\n): NavigationLink[] => {\r\n    return [\r\n        {\r\n            name: t('navigation.overview'),\r\n            route: routes.overview.stake,\r\n            image: overviewImg,\r\n            selectedImage: overviewSelectedImg\r\n        },\r\n        {\r\n            name: t('navigation.guardians'),\r\n            route: routes.guardians.stake.replace(':address', getAddress(guardian)),\r\n            image: guardiansImg,\r\n            selectedImage: guardiansSelectedImg\r\n        },\r\n        {\r\n            name: t('navigation.delegators'),\r\n            route: routes.delegators.stake.replace(':address', getAddress(delegator)),\r\n            image: delegatorsImg,\r\n            selectedImage: delegatorsSelectedImg\r\n        }\r\n    ];\r\n};\r\n","import React, { FunctionComponent as Component, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Link, useParams, withRouter } from 'react-router-dom';\r\nimport { generateNavigationLinks } from '../../utils/navigation';\r\nimport Logo from '../../assets/images/navbar-logo.svg';\r\nimport { NavigationLink, RouteParams } from '../../global/types';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState } from '../../redux/types/types';\r\n\r\nimport './navigation-menu.scss';\r\n\r\nexport const NavigationMenu: Component<any> = () => {\r\n    const { t } = useTranslation();\r\n    const [selectedSection, setSelectedSection] = useState<string | null>(null)\r\n    const {selectedDelegator} = useSelector((state: AppState) => state.delegator);\r\n    const {selectedGuardian} = useSelector((state: AppState) => state.guardians);\r\n    const params: RouteParams = useParams()\r\n\r\n\r\n    useEffect(() => {\r\n        const {section} = params\r\n        setSelectedSection(section)\r\n    }, [params.section])\r\n\r\n    return (\r\n        <nav className=\"navigation flex-column\">\r\n            <img src={Logo} alt=\"\" className=\"navigation-logo\" />\r\n            <h4 className=\"navigation-title\">{t('navigation.orbsUniverse')}</h4>\r\n            <h5 className=\"navigation-sub-title\">{t('navigation.analytics')}</h5>\r\n            <ul className=\"navigation-list flex-column\">\r\n                {generateNavigationLinks(t, selectedDelegator, selectedGuardian).map((link: NavigationLink, index: number) => {\r\n               \r\n                    const { name, image, route, selectedImage } = link;\r\n                    const isSelected = selectedSection === name\r\n                    const className = isSelected ? 'navigation-list-item navigation-list-item-selected' : 'navigation-list-item'\r\n                    return (\r\n                       <li className={className}  key = {index}>\r\n                            <Link to={route} className='navigation-list-item-link flex-column'>\r\n                                <img src={isSelected ? selectedImage : image} alt=\"\" />\r\n                                <p className='capitalize'>{name}</p>\r\n                            </Link>\r\n                       </li>\r\n                    );\r\n                })}\r\n            </ul>\r\n        </nav>\r\n    );\r\n};\r\n\r\n\r\n","import React from 'react';\r\nimport { routes } from '../../../../../../routes/routes';\r\nimport { convertToString } from '../../../../../../utils/number';\r\nimport { Link } from 'react-router-dom';\r\nimport CopyImg from '../../../../../../assets/images/copy.svg';\r\nimport { GuardianDelegator } from '@orbs-network/pos-analytics-lib';\r\n\r\ninterface StateProps {\r\n    delegator: GuardianDelegator;\r\n}\r\n\r\nexport const GuardianDelegatorElement = ({ delegator }: StateProps) => {\r\n    const { address, stake, non_stake } = delegator;\r\n    return (\r\n        <li className=\"flex-start-center\">\r\n            <Link\r\n                className=\"list-item text-overflow flex-start-center\"\r\n                to={routes.delegators.stake.replace(':address', address)}>\r\n                <p>{address}</p>\r\n                <img src={CopyImg} alt=\"\" />\r\n            </Link>\r\n            <p className=\"list-item\">{convertToString(stake)}</p>\r\n            <p className=\"list-item\">{convertToString(non_stake)}</p>\r\n        </li>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { GuardianDelegator } from '@orbs-network/pos-analytics-lib';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState } from '../../../../redux/types/types';\r\nimport { LoadingComponent } from '../../../../components/loading-component/loading-component';\r\nimport { LoaderType } from '../../../../global/enums';\r\nimport { NoData } from '../../../../components/no-data/no-data';\r\nimport './guardian-delegators.scss';\r\nimport { GuardianDelegatorElement } from './components/guardian-delegator/guardian-delegator';\r\n\r\nexport const GuardianDelegators = () => {\r\n    const { selectedGuardian, guardianIsLoading } = useSelector((state: AppState) => state.guardians);\r\n\r\n    const titles = ['Delegator\\'s address', 'Stake', 'Non-staked balance'];\r\n    return (\r\n        <div className=\"list guardian-delegators-list\">\r\n          {selectedGuardian &&   <header className=\"list-header flex-start-center\">\r\n                {titles.map((title: any, index: number) => {\r\n                    return (\r\n                        <h3 key={index} className=\"list-item\">\r\n                            {title}\r\n                        </h3>\r\n                    );\r\n                })}\r\n            </header>}\r\n           <LoadingComponent isLoading = {guardianIsLoading} loaderType = {LoaderType.LIST} listElementAmount={3}>\r\n           <ul>\r\n                {selectedGuardian ?\r\n                    selectedGuardian.delegators.map((delegator: GuardianDelegator) => {\r\n                        return <GuardianDelegatorElement  key = {delegator.address} delegator = {delegator} />\r\n                    }) : <NoData />}\r\n            </ul>\r\n           </LoadingComponent>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { ChartColors } from '../../../../../../global/enums';\r\nimport { ChartData } from '../../../../../../global/types';\r\nimport { generateDatasets, getGuardiansLineChartSettings } from '../../../../../../utils/chart';\r\n\r\ninterface StateProps {\r\n    chartData: ChartData;\r\n}\r\n\r\nexport const Chart = ({ chartData }: StateProps) => {\r\n    const { t } = useTranslation();\r\n    const data = {\r\n        datasets: generateDatasets(chartData)\r\n    };\r\n\r\n    const options = getGuardiansLineChartSettings(chartData.unit, t);\r\n    return options ? (\r\n        <div className=\"line-chart\">\r\n            <div className=\"line-chart-text line-chart-text-left\">\r\n                <p className=\"one-line\" style={{ color: ChartColors.GREEN }}>\r\n                    {t('guardians.delegators')}\r\n                </p>\r\n            </div>\r\n            <Line data={data} options={options} />\r\n            <div className=\"line-chart-text line-chart-text-right flex-center\">\r\n                <p className=\"one-line\" style={{ color: ChartColors.YELLOW }}>\r\n                    {`${t('guardians.totalDelegation')}`}\r\n                </p>\r\n                <small>{`&`}</small>\r\n                <p className=\"one-line\" style={{ color: ChartColors.GRAY }}>{`${t('guardians.ownDelegation')}`}</p>\r\n            </div>\r\n        </div>\r\n    ) : null;\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { TimeRangeSelector } from '../../../../../../components/date-format-picker/time-range-selector';\r\nimport { LoadingComponent } from '../../../../../../components/loading-component/loading-component';\r\nimport { NoData } from '../../../../../../components/no-data/no-data';\r\nimport { ChartUnit, LoaderType } from '../../../../../../global/enums';\r\nimport { setGuardianChartData } from '../../../../../../redux/actions/actions';\r\nimport { AppState } from '../../../../../../redux/types/types';\r\nimport { generateGuardiansChartData } from '../../../../../../utils/guardians';\r\nimport { Chart } from './chart';\r\nimport './guardian-stake-chart.scss';\r\n\r\n\r\nexport const GuardianStakeChart = () => {\r\n    const dispatch = useDispatch();\r\n    const { selectedGuardian, guardianIsLoading, guardianChartData } = useSelector(\r\n        (state: AppState) => state.guardians\r\n    );\r\n    const { t } = useTranslation();\r\n    useEffect(() => {\r\n        if (guardianChartData) return;\r\n        selectChartData(ChartUnit.MONTH);\r\n    }, [selectedGuardian && selectedGuardian.address]);\r\n\r\n    const selectChartData = (unit: ChartUnit) => {\r\n        const data = generateGuardiansChartData(unit, selectedGuardian);\r\n        dispatch(setGuardianChartData(data));\r\n    };\r\n    return (\r\n        <div className=\"guardian-stake-chart\">\r\n            <LoadingComponent loaderType={LoaderType.BIG} isLoading={guardianIsLoading}>\r\n                {guardianChartData ? (\r\n                    <>\r\n                        <header className=\"flex-between\">\r\n                            <h4>{t('delegators.stakeChangeOverTime')}</h4>\r\n                            <TimeRangeSelector selected={guardianChartData.unit} selectCallBack={selectChartData} />\r\n                        </header>\r\n                        <Chart chartData={guardianChartData}  />\r\n                    </>\r\n                ) : (\r\n                    null\r\n                )}\r\n            </LoadingComponent>\r\n            {!selectedGuardian && !guardianIsLoading && <NoData />}\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react'\r\nimport { useTranslation } from 'react-i18next';\r\nimport { ChartColors } from '../../../../../../global/enums';\r\n\r\n\r\n\r\ninterface Legend {\r\n    name: string;\r\n    background: ChartColors;\r\n}\r\n\r\nexport const GuardianStakeLegend = () => {\r\n    const {t} = useTranslation()\r\n    const legends = [\r\n        {\r\n            name: t('guardians.totalDelegation'),\r\n            background: ChartColors.YELLOW\r\n        },\r\n        {\r\n            name: t('guardians.ownDelegation'),\r\n            background: ChartColors.GRAY\r\n        },\r\n        {\r\n            name: `# ${t('guardians.delegators')}`,\r\n            background: ChartColors.GREEN\r\n        }\r\n    ];\r\n\r\n    return (\r\n        <section className=\"guardian-stake-legend\">\r\n                <h4 className='capitalize'>{t('guardians.legend')}</h4>\r\n                {legends.map((legend: Legend) => {\r\n                    const { name, background } = legend;\r\n                    return (\r\n                        <div key = {name} className='flex-start-center'>\r\n                            <figure\r\n                                style={{\r\n                                    background\r\n                                }}></figure>\r\n                            <p className='capitalize'>{name}</p>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </section>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport { GuardianStakeChart } from './components/guardian-stake-chart/guardian-stake-chart';\r\nimport { GuardianStakeLegend } from './components/guardian-stake-legend/guardian-stake-legend';\r\nimport './guardians-stake.scss';\r\n\r\nexport const GuardiansStake = () => {\r\n\r\n    return (\r\n        <div className=\"guardian-stake flex-start\">\r\n            <GuardianStakeChart />\r\n            <GuardianStakeLegend />\r\n        </div>\r\n    );\r\n};\r\n","import { Guardian } from '@orbs-network/pos-analytics-lib';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { useClickOutside } from 'react-click-outside-hook';\r\nimport { RouteParams } from '../../../../global/types';\r\nimport { getGuardianAction } from '../../../../redux/actions/actions';\r\nimport { AppState } from '../../../../redux/types/types';\r\nimport { routes } from '../../../../routes/routes';\r\nimport { checkIfLoadDelegator, filterGuardians, getGuardianByAddress } from '../../../../utils/guardians';\r\nimport LoupeImg from '../../../../assets/images/loupe.svg';\r\n\r\n\r\nexport const GuardianSearch = () => {\r\n    const { guardians, selectedGuardian } = useSelector((state: AppState) => state.guardians);\r\n    const dispatch = useDispatch();\r\n    const history: any = useHistory();\r\n    const { t } = useTranslation();\r\n    const [ref, hasClickedOutside] = useClickOutside();\r\n    const [inputValue, setInputValue] = useState<string>('');\r\n    const [showResults, setShowResults] = useState<boolean>(false);\r\n    const params: RouteParams = useParams();\r\n    useEffect(() => {\r\n        findGuardianOnLoad();\r\n    }, []);\r\n\r\n    const findGuardianOnLoad = () => {\r\n        const { address } = params;\r\n        if (!address) return;\r\n        findGuardian(address);\r\n    };\r\n\r\n    const findGuardian = (address: string) => {\r\n        const loadGuardian = checkIfLoadDelegator(address, selectedGuardian);\r\n        if (loadGuardian) {\r\n            dispatch(getGuardianAction(address));\r\n        }\r\n    };\r\n    const searchByAddress = (address: string) => {\r\n        const { section } = params;\r\n        history.push(routes.guardians.main.replace(':section?', section).replace(':address', address));\r\n        findGuardian(address);\r\n    };\r\n    useEffect(() => {\r\n        const { address } = params;\r\n        if (hasClickedOutside) {\r\n            setShowResults(false);\r\n            setGuardianNameAsValue(address)\r\n        }\r\n    }, [hasClickedOutside]);\r\n\r\n\r\n\r\n    const setGuardianNameAsValue = (address?: string) => {\r\n        if(!address) return \r\n        const guardian = getGuardianByAddress(guardians, address)\r\n        if(!guardian) return\r\n        const string = `${guardian.name} (${guardian.address})`\r\n        setInputValue(string);\r\n    }\r\n\r\n    useEffect(() => {\r\n        const { address } = params;\r\n        setGuardianNameAsValue(address)\r\n    }, [ guardians && guardians.length]);\r\n\r\n    const handlePaste = (e: React.ClipboardEvent<HTMLInputElement>) => {\r\n        const value = e.clipboardData.getData('Text');\r\n        searchByAddress(value);\r\n    };\r\n\r\n    const submit = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (!inputValue) return;\r\n        if (e.key === 'Enter' || e.keyCode === 13) {\r\n            searchByAddress(inputValue);\r\n        }\r\n    };\r\n    const select = (guardian: Guardian) => {\r\n        const { address } = guardian;\r\n        setGuardianNameAsValue(address)\r\n        setShowResults(false);\r\n        searchByAddress(address);\r\n    };\r\n  \r\n    return (\r\n        <div className=\"guardian search-input flex-column\">\r\n            <p className=\"search-input-title\">{t('guardians.selectGuardian')}</p>\r\n            <section className=\"search-input-box\" ref={ref}>\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"search-input-box-btn flex-center\"\r\n                    onClick={() => searchByAddress(inputValue)}>\r\n                    <img src={LoupeImg} alt=\"\" />\r\n                </button>\r\n                <input\r\n                    onKeyUp={(e: React.KeyboardEvent<HTMLInputElement>) => submit(e)}\r\n                    type=\"text\"\r\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => setInputValue(e.target.value)}\r\n                    value={inputValue}\r\n                    onFocus={() => setShowResults(true)}\r\n                    onPaste={(e: React.ClipboardEvent<HTMLInputElement>) => handlePaste(e)}\r\n                    placeholder = {t('guardians.inputPlaceholder')}\r\n                />\r\n                {showResults && (\r\n                    <ul className=\"search-input-box-results\">\r\n                        {filterGuardians(guardians || [], inputValue).map((result: Guardian, index: number) => {\r\n                            const { address, name } = result;\r\n                            return (\r\n                                <li key={index} className=\"flex-start-center\" onClick={() => select(result)}>\r\n                                    <p className=\"text-overflow\">{`${name} (${address})`}</p>\r\n                                </li>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                )}\r\n            </section>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useSelector } from 'react-redux';\r\nimport { SectionMenu } from '../../../../components/section-menu/section-menu';\r\nimport { AppState } from '../../../../redux/types/types';\r\nimport { generateGuardiansRoutes } from '../../../../utils/guardians';\r\n\r\nexport const GuardianSectionSelect = () => {\r\n    const { selectedGuardian } = useSelector((state: AppState) => state.guardians);\r\n\r\n    const { t } = useTranslation();\r\n    return (\r\n        <SectionMenu options={generateGuardiansRoutes(t, selectedGuardian)} />\r\n    );\r\n};\r\n","import React  from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport { routes } from '../../routes/routes';\r\nimport { GuardianDelegators } from './sections/guardian-delegators/guardian-delegators';\r\nimport { GuardiansStake } from './sections/guardians-stake/guardians-stake';\r\nimport { GuardianSearch } from './components/guardian-search/guardian-search';\r\nimport { GuardianSectionSelect } from './components/guardian-section-select/guardian-section-select';\r\nimport './guardians.scss';\r\n\r\nconst GuardiansComponent = () => {\r\n  \r\n    return (\r\n        <div className=\"guardians screen\">\r\n           <GuardianSearch />\r\n            <div className=\"screen-section\">\r\n             <GuardianSectionSelect />\r\n                <div className=\"screen-section-container\">\r\n                    <Route path={routes.guardians.stake} render={() => <GuardiansStake />} />\r\n                    <Route path={routes.guardians.delegators} render={() => <GuardianDelegators />} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const Guardians = React.memo(GuardiansComponent)","export const overviewguardiansColors = [\r\n    '#00A7EA',\r\n    '#74DABF',\r\n    '#FF8FC8',\r\n    '#FF4463',\r\n    '#FFBD51',\r\n    '#74737A',\r\n    '#00D48C',\r\n    '#CF4E81',\r\n    '#FFEC2A',\r\n    '#B9770B',\r\n    '#00187C',\r\n    '#FBCBFF'\r\n];\r\n","import { Guardian, PosOverview, PosOverviewData, PosOverviewSlice } from '@orbs-network/pos-analytics-lib';\r\nimport { TFunction } from 'i18next';\r\nimport { ChartUnit, OverviewSections } from '../global/enums';\r\nimport { MenuOption, OverviewChartData, OverviewChartObject } from '../global/types';\r\nimport { routes } from '../routes/routes';\r\nimport { converFromNumberToDate, generateDays, generateMonths, generateWeeks, returnDateNumber } from './dates';\r\nimport { sortByDate, sortByNumber } from './array';\r\nimport { overviewguardiansColors } from '../ui/colors';\r\nimport { DATE_FORMAT, OVERVIEW_CHART_LIMIT } from '../global/variables';\r\nexport const getGuardiantsAndCandidates = (guardians: Guardian[]) => {\r\n    console.log(guardians);\r\n};\r\n\r\nexport const generateOverviewRoutes = (t: TFunction): MenuOption[] => {\r\n    return [\r\n        {\r\n            name: t('main.stake'),\r\n            route: routes.overview.stake,\r\n            key: OverviewSections.STAKE\r\n        },\r\n        {\r\n            name: t('main.weights'),\r\n            route: routes.overview.weights,\r\n            key: OverviewSections.WEIGHTS\r\n        }\r\n    ];\r\n};\r\n\r\nexport const getGuardianColor = (amount: number) => {\r\n    let arr: string[] = [];\r\n    let count = 0;\r\n    const limit = overviewguardiansColors.length - 1;\r\n    for (let i = 0; i < amount; i++) {\r\n        const color = overviewguardiansColors[count];\r\n        arr.push(color);\r\n        if (count === limit) {\r\n            count = 0;\r\n        } else {\r\n            count += 1;\r\n        }\r\n    }\r\n    return arr;\r\n};\r\n\r\nconst getSortedGuardiansOrder = (slices: PosOverviewSlice[]) => {\r\n    const sorted = sortByDate(slices);\r\n    const latest: PosOverviewSlice = sorted[0];\r\n    const { data } = latest;\r\n    const sortedGuardians = sortByNumber(data, 'effectiveStake');\r\n    const guardiansObject: any = {};\r\n    sortedGuardians.forEach((guardian: Guardian, index: number) => {\r\n        const obj: any = {\r\n            order: index\r\n        };\r\n        guardiansObject[guardian.address] = obj;\r\n    });\r\n    return guardiansObject;\r\n};\r\n\r\nconst reorderGuardians = (data: PosOverviewData[], orderObject: any): PosOverviewData[] => {\r\n    return data.sort((a: PosOverviewData, b: PosOverviewData) => {\r\n        return orderObject[a.address] - orderObject[b.address];\r\n    });\r\n};\r\n\r\nexport const getOverviewChartData = (dates: any, unit: ChartUnit, overviewData: PosOverview): OverviewChartData => {\r\n    const { slices } = overviewData;\r\n    const order = getSortedGuardiansOrder(slices);\r\n    const datesInUse: any = [];\r\n    slices.forEach((slice: PosOverviewSlice) => {\r\n        const { block_time, data } = slice;\r\n        const date = returnDateNumber(block_time, unit);\r\n        if (!date) return;\r\n        if (!dates.hasOwnProperty(date)) return;\r\n        if (datesInUse.includes(date)) return;\r\n        datesInUse.push(date);\r\n        dates[date] = reorderGuardians(data, order);\r\n    });\r\n    return {\r\n        data: fillEmptyData(dates, unit),\r\n        unit\r\n    };\r\n};\r\n\r\nexport const fillEmptyData = (dates: any, unit: ChartUnit): OverviewChartObject[] => {\r\n    let previousData: any = [];\r\n    const data = Object.keys(dates).map(function (key, index) {\r\n        const data = dates[key];\r\n        const date = converFromNumberToDate(Number(key), unit, DATE_FORMAT);\r\n        if (data.length === 0) {\r\n            return {\r\n                data: previousData,\r\n                date\r\n            };\r\n        } else {\r\n            previousData = data;\r\n            return {\r\n                date,\r\n                data: dates[key]\r\n            };\r\n        }\r\n    });\r\n    return data;\r\n};\r\n\r\nexport const generateOverviewChartData = (type: ChartUnit, overviewData?: PosOverview) => {\r\n    if (!overviewData) return;\r\n    let data;\r\n    switch (type) {\r\n        case ChartUnit.MONTH:\r\n            const months = generateMonths(OVERVIEW_CHART_LIMIT);\r\n            data = getOverviewChartData(months, ChartUnit.MONTH, overviewData);\r\n            break;\r\n        case ChartUnit.WEEK:\r\n            const weeks = generateWeeks(OVERVIEW_CHART_LIMIT);\r\n            data = getOverviewChartData(weeks, ChartUnit.WEEK, overviewData);\r\n            break;\r\n        case ChartUnit.DAY:\r\n            const days = generateDays(OVERVIEW_CHART_LIMIT);\r\n            data = getOverviewChartData(days, ChartUnit.DAY, overviewData);\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return data;\r\n};\r\n","import React from 'react'\r\nimport { useTranslation } from 'react-i18next';\r\nimport { SectionMenu } from '../../../../components/section-menu/section-menu';\r\nimport { generateOverviewRoutes } from '../../../../utils/overview';\r\n\r\nexport const OverviewSectionSelector = () => {\r\n    const { t } = useTranslation();\r\n    return <SectionMenu options={generateOverviewRoutes(t,)} />\r\n\r\n}\r\n\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppState } from '../../../../redux/types/types';\r\nimport { convertToString } from '../../../../utils/number';\r\nimport TotalStakeImg from '../../../../assets/images/cpu.svg';\r\nimport GuardiansImg from '../../../../assets/images/encrypted.svg';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { LoadingComponent } from '../../../../components/loading-component/loading-component';\r\nimport {  LoaderType } from '../../../../global/enums';\r\nimport './overview-top.scss';\r\n\r\ninterface StateProps {\r\n    data: number;\r\n    textTop: string;\r\n    textBottom: string;\r\n    imgSrc: string;\r\n    btnText: string;\r\n    link?: string;\r\n}\r\n\r\nconst OverviewTopSection = ({ data, textTop, textBottom, imgSrc, btnText, link }: StateProps) => {\r\n    return (\r\n        <section className=\"overview-top-section flex-column\">\r\n            <div className=\"flex-between\">\r\n                <span className=\"flex-start-center\">\r\n                    <img src={imgSrc} alt=\"\" />\r\n                    <span className='flex-column'>\r\n                        <p>{textTop}</p>\r\n                        <p>{textBottom}</p>\r\n                    </span>\r\n                </span>\r\n                <LoadingComponent loaderType = {LoaderType.TEXT} isLoading ={!data}>\r\n                <h4>{convertToString(data)}</h4>\r\n                </LoadingComponent>\r\n            </div>\r\n        <button type='button' className='flex-center'>\r\n    {link ?  <a className='flex-center' href={link} target='_blank'>{btnText}</a> : btnText}\r\n        </button>\r\n        </section>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\nconst OverviewTopComponent = () => {\r\n    const { overviewData } = useSelector((state: AppState) => state.overview);\r\n    const { t } = useTranslation();\r\n    const dispatch = useDispatch()\r\n    return (\r\n        <div className=\"overview-top flex-start-center\">\r\n            <OverviewTopSection\r\n                textTop={t('overview.total')}\r\n                textBottom={t('overview.stake')}\r\n                data={overviewData?.total_stake || 0}\r\n                imgSrc={TotalStakeImg}\r\n                btnText = {t('overview.stakeYourTokens')}\r\n                link = 'https://staking.orbs.network'\r\n            />\r\n            <OverviewTopSection\r\n                textTop={t('overview.guardians')}\r\n                textBottom={t('overview.candidates')}\r\n                data={overviewData ? overviewData.n_candidates + overviewData.n_guardians : 0}\r\n                imgSrc={GuardiansImg}\r\n                btnText = {t('overview.guardianList')}\r\n                link = 'https://staking.orbs.network'\r\n            />\r\n        </div>\r\n    );\r\n};\r\nexport const OverviewTop = React.memo(OverviewTopComponent)","import React from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { getGuardianColor } from '../../utils/overview';\r\nimport { Guardian } from '@orbs-network/pos-analytics-lib';\r\nimport { formatNumber } from '../../utils/number';\r\n\r\ninterface StateProps {\r\n    chartData: any;\r\n}\r\n\r\nexport const BarChartComponent = ({ chartData }: StateProps) => {\r\n    const createDataset = (backgroundColor: string, label: string) => {\r\n        console.log(label)\r\n        return {\r\n            backgroundColor,\r\n            label,\r\n            data: [],\r\n            maxBarThickness: 30\r\n        };\r\n    };\r\n\r\n    const addToDataset = (data: any, datasets: any, colors: any, date: any, index: number) => {\r\n        data.forEach((guardian: Guardian, i: number) => {\r\n            const { address, effectiveStake } = guardian;\r\n            if (!datasets[address]) {\r\n                datasets[address] = createDataset(colors[i], `dataset ${index + i}`);\r\n            }\r\n            const obj = {\r\n                x: date,\r\n                y: effectiveStake,\r\n                ...guardian\r\n            };\r\n            datasets[address].data.push(obj);\r\n        });\r\n        return datasets;\r\n    };\r\n\r\n    const generateDataset = (arr: any) => {\r\n        if (!arr) return;\r\n        const colors = getGuardianColor(21);\r\n        let datasets: any = {};\r\n        arr.data.forEach((elem: any, index: number) => {\r\n            const { data, date } = elem;\r\n            datasets = addToDataset(data, datasets, colors, date, index);\r\n        });\r\n        const result = Object.keys(datasets).map((key) => datasets[key]);\r\n        return result;\r\n    };\r\n\r\n    var barChartData = {\r\n        datasets: generateDataset(chartData)\r\n    };\r\n    console.log(barChartData)\r\n\r\n    const options = {\r\n        maintainAspectRatio: false,\r\n        responsive: true,\r\n        elements: {\r\n            line: {\r\n                tension: 0\r\n            }\r\n        },\r\n        legend: {\r\n            display: false\r\n        },\r\n        title: {\r\n            display: false\r\n        },\r\n        animation: {\r\n            duration: 0\r\n        },\r\n      \r\n        interaction: {\r\n            mode: 'index'\r\n        },\r\n        tooltips: {\r\n            callbacks: {\r\n                label: function(tooltipItem:any, data:any) {\r\n                    console.log(data.datasets[tooltipItem.datasetIndex])\r\n                    var label = data.datasets[tooltipItem.datasetIndex].label || '';\r\n\r\n                    if (label) {\r\n                        label += ': ';\r\n                    }\r\n                    label += Math.round(tooltipItem.yLabel * 100) / 100;\r\n                    return label;\r\n                }\r\n            }\r\n        },\r\n        scales: {\r\n            xAxes: [\r\n                {\r\n                    distribution: 'series',\r\n                    offset: true,\r\n                    type: 'time',\r\n                    time: {\r\n                        unit:chartData.unit,\r\n                        format: 'DD/MM/YYYY'\r\n                    },\r\n                    stacked: true,\r\n                    gridLines: {\r\n                        display: false,\r\n                        drawBorder: false\r\n                    },\r\n                    ticks: {\r\n                        padding: 10,\r\n                        fontSize: 12,\r\n                        fontFamily: 'Montserrat',\r\n                        fontColor: '#666666'\r\n                    }\r\n                }\r\n            ],\r\n            yAxes: [\r\n                \r\n                {\r\n                    gridLines: {\r\n                        display: true,\r\n                        color: 'rgba(255,99,132,0.2)',\r\n                        borderDash: [5],\r\n                        zeroLineBorderDash: [5],\r\n                        zeroLineColor: 'rgba(255,99,132,0.2)',\r\n                        drawBorder: false\r\n                    },\r\n                    stacked: true,\r\n                    ticks: {\r\n                        maxTicksLimit: 7,\r\n                        fontSize: 12,\r\n                        fontFamily: 'Montserrat',\r\n                        fontColor: '#666666',\r\n                        callback: function (value: number) {\r\n                            return formatNumber(value, '0.0a').toUpperCase();\r\n                        },\r\n                        padding: 15\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    };\r\n\r\n    return <Bar data={barChartData} options={options} />;\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { BarChartComponent } from '../../../../../../components/bar-chart/bar-chart';\r\nimport { TimeRangeSelector } from '../../../../../../components/date-format-picker/time-range-selector';\r\nimport { LoadingComponent } from '../../../../../../components/loading-component/loading-component';\r\nimport { ChartUnit, LoaderType } from '../../../../../../global/enums';\r\nimport { setOverviewChartData } from '../../../../../../redux/actions/actions';\r\nimport { AppState } from '../../../../../../redux/types/types';\r\nimport { generateOverviewChartData } from '../../../../../../utils/overview';\r\nimport './overview-stake-chart.scss';\r\n\r\nexport const OverviewStakeChart = () => {\r\n    const dispatch = useDispatch();\r\n    const { overviewData, overviewChartData, overviewDataLoding } = useSelector((state: AppState) => state.overview);\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        if (overviewChartData) return;\r\n        selectChartData(ChartUnit.WEEK);\r\n    }, [overviewData]);\r\n\r\n    const selectChartData = (unit: ChartUnit) => {\r\n        const data = generateOverviewChartData(unit, overviewData);\r\n        dispatch(setOverviewChartData(data));\r\n    };\r\n    return (\r\n        <div className=\"overview-stake-chart\">\r\n            <LoadingComponent isLoading={overviewDataLoding} loaderType={LoaderType.BIG}>\r\n                {overviewChartData && (\r\n                    <header className=\"flex-between\">\r\n                        <h4 className=\"capitalize\">{t('overview.graphText')}</h4>\r\n                        <TimeRangeSelector\r\n                            selected={overviewChartData.unit}\r\n                            selectCallBack={selectChartData}\r\n                            unitsToHide={[ChartUnit.MONTH]}\r\n                        />\r\n                    </header>\r\n                )}\r\n                {overviewChartData && (\r\n                    <div className=\"bar-chart\">\r\n                        <BarChartComponent chartData={overviewChartData} />\r\n                    </div>\r\n                )}\r\n            </LoadingComponent>\r\n        </div>\r\n    );\r\n};\r\n","import { Dispatch } from 'redux';\r\nimport { api } from '../../services/api';\r\nimport { types } from '../types/types';\r\n\r\nexport const getOverviewAction = () => async (dispatch: any) => {\r\n    const overview = await api.getOverviewApi();\r\n    if (!overview) return null;\r\n    return dispatch({\r\n        type: types.OVERVIEW.SET_OVERVIEW,\r\n        payload: overview\r\n    });\r\n};\r\n\r\nexport const setOverviewChartData = (data: any) => async (dispatch: Dispatch) => {\r\n    return dispatch({\r\n        type: types.OVERVIEW.SET_CHART_DATA,\r\n        payload: data\r\n    });\r\n};\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { AppState } from '../../../../../../redux/types/types';\r\nimport { routes } from '../../../../../../routes/routes';\r\nimport { getGuardianColor } from '../../../../../../utils/overview';\r\nimport CopyImg from '../../../../../../assets/images/copy.svg';\r\nimport { LoadingComponent } from '../../../../../../components/loading-component/loading-component';\r\nimport { LoaderType } from '../../../../../../global/enums';\r\n\r\n\r\nimport './overview-stake-guardians.scss';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nexport const OverviewStakeGuadians = () =>  {\r\n    const { overviewData } = useSelector((state: AppState) => state.overview);\r\n    const { t } = useTranslation();\r\n    \r\n    return (\r\n        <div className=\"overview-stake-guardians\">\r\n        <header className=\"flex-start\">{t('overview.guardianList')}</header>\r\n       <LoadingComponent isLoading = {!overviewData} loaderType = {LoaderType.LIST} listElementAmount={6}>\r\n       <ul className=\"overview-stake-guardians-list\">\r\n            {overviewData &&\r\n                overviewData.slices &&\r\n                overviewData.slices[0].data.map((guardian: any, index: number) => {\r\n                    const colors = getGuardianColor(overviewData.slices[0].data.length);\r\n                    const background = colors[index];\r\n                    return (\r\n                        <li key={index}>\r\n                            <Link\r\n                                to={routes.guardians.stake.replace(':address', guardian.address)}\r\n                                className=\"flex-start-center\">\r\n                                <figure\r\n                                    style={{\r\n                                        background\r\n                                    }}></figure>\r\n                                <p className=\"text-overflow\">{guardian.name}</p>\r\n                                <img src={CopyImg} alt=\"\" />\r\n                            </Link>\r\n                        </li>\r\n                    );\r\n                })}\r\n        </ul>\r\n       </LoadingComponent>\r\n    </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\n\r\nimport './overview-stake.scss';\r\nimport { OverviewStakeChart } from './components/overview-stake-chart/overview-stake-chart';\r\nimport { OverviewStakeGuadians } from './components/overview-stake-guardians/overview-stake-guardians';\r\nexport const OverviewStake = () => {\r\n    return (\r\n        <div className=\"overview-stake flex-between\">\r\n            <OverviewStakeChart />\r\n           <OverviewStakeGuadians />\r\n        </div>\r\n    );\r\n};\r\n","import React, { useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { Route } from 'react-router-dom';\r\nimport { getOverviewAction } from '../../redux/actions/actions';\r\nimport { routes } from '../../routes/routes';\r\nimport { OverviewSectionSelector } from './components/overview-section-selector/overview-section-selector';\r\nimport { OverviewTop } from './components/overview-top/overview-top';\r\nimport './overview.scss';\r\nimport { OverviewStake } from './sections/overview-stake/overview-stake';\r\n\r\n export const Overview = () =>  {\r\n    return (\r\n        <div className='overview screen'>\r\n                <OverviewTop />\r\n                <div className=\"screen-section\">\r\n                <OverviewSectionSelector />\r\n                <div className=\"screen-section-container\">\r\n                    <Route path={routes.overview.stake} render={() => <OverviewStake />} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { BrowserRouter as Router, Switch, Route, Redirect, useParams } from 'react-router-dom';\r\nimport React, { FunctionComponent as Component } from 'react';\r\n\r\nimport { routes } from './routes';\r\nimport { Delegators } from '../screens/deligators/delegators';\r\nimport { NavigationMenu } from '../components/navigation-menu/navigation-menu';\r\nimport { Guardians } from '../screens/guardians/guardians';\r\nimport { Overview } from '../screens/overview/overview';\r\n\r\nexport const RootRouter: Component = () => {\r\n    return (\r\n        <Router basename={process.env.PUBLIC_URL}>\r\n           \r\n            <Route path={routes.navigation} render={() =>  <NavigationMenu />} />\r\n            <Switch>\r\n                <Route exact path=\"/\">\r\n                    <Redirect to={routes.overview.stake} />\r\n                </Route>\r\n                <Route path={routes.overview.main} render={() => <Overview />} />\r\n                <Route path={routes.guardians.main} render={() => <Guardians />} />\r\n                <Route path={routes.delegators.main} render={() => <Delegators />} />\r\n            </Switch>\r\n        </Router>\r\n    );\r\n};\r\n","import React, { FunctionComponent as Component, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getGuardiansAction, getOverviewAction } from './redux/actions/actions';\nimport { RootRouter } from './routes';\nimport './scss/app.scss';\n\n\nconst App: Component = () => {\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(getGuardiansAction());\n        dispatch(getOverviewAction())\n    }, [])\n\n    return (\n        <div className='app flex-between'>\n            <RootRouter />\n        </div>\n    )\n};\n\nexport default App;\n","import { AuthState } from '../types/auth-types';\r\nimport { types } from '../types/types';\r\n\r\nconst initialState: AuthState = {\r\n    token: ''\r\n};\r\n\r\nexport const authReducer = (state = initialState, { payload, type }: any): AuthState => {\r\n    switch (type) {\r\n        case types.LOGIN:\r\n            return {\r\n                ...state\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { AuthState } from '../types/auth-types';\r\nimport { DelegatorState } from '../types/delegator-types';\r\nimport { types } from '../types/types';\r\n\r\nconst initialState: DelegatorState = {\r\n    selectedDelegator: undefined,\r\n    delegatorNotFound: false,\r\n    delegatorIsLoading: false,\r\n    delegatorChartData: undefined\r\n};\r\n\r\nexport const delegatorReducer = (state = initialState, { payload, type }: any): DelegatorState => {\r\n    switch (type) {\r\n        case types.DELEGATOR.SET_DELEGATOR:\r\n            return {\r\n                ...state,\r\n                selectedDelegator: payload\r\n            };\r\n        case types.DELEGATOR.DELEGATOR_LOADING:\r\n            return {\r\n                ...state,\r\n                delegatorIsLoading: payload\r\n            };\r\n        case types.DELEGATOR.CLEAR_DELEGATOR:\r\n            return {\r\n                ...state,\r\n                selectedDelegator: undefined\r\n            };\r\n        case types.DELEGATOR.DELEGATOR_NOT_FOUND:\r\n            return {\r\n                ...state,\r\n                delegatorNotFound: payload,\r\n                selectedDelegator: payload ? undefined : state.selectedDelegator\r\n            };\r\n        case types.DELEGATOR.SET_DELEGATOR_CHART_DATA:\r\n            return {\r\n                ...state,\r\n                delegatorChartData: payload\r\n            };\r\n        case types.DELEGATOR.RESET_DELEGATOR:\r\n            return {\r\n                ...state,\r\n                delegatorChartData: undefined,\r\n                selectedDelegator: undefined,\r\n                delegatorNotFound: false,\r\n                delegatorIsLoading: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { GuardiansState } from '../types/guardians-types';\r\nimport { types } from '../types/types';\r\n\r\nconst initialState: GuardiansState = {\r\n    selectedGuardian: undefined,\r\n    guardians: undefined,\r\n    guardianNotFound: false,\r\n    guardianIsLoading: false,\r\n    guardianChartData: undefined\r\n};\r\n\r\nexport const guardiansReducer = (state = initialState, { payload, type }: any): GuardiansState => {\r\n    switch (type) {\r\n        case types.GUARDIAN.SET_GUARDIAN:\r\n            return {\r\n                ...state,\r\n                selectedGuardian: payload\r\n            };\r\n        case types.GUARDIAN.SET_GUARDIANS:\r\n            return {\r\n                ...state,\r\n                guardians: payload\r\n            };\r\n        case types.GUARDIAN.GUARDIAN_NOT_FOUND:\r\n            return {\r\n                ...state,\r\n                guardianNotFound: payload\r\n            };\r\n        case types.GUARDIAN.GUARDIAN_LOADING:\r\n            return {\r\n                ...state,\r\n                guardianIsLoading: payload\r\n            };\r\n        case types.GUARDIAN.SET_GUARDIAN_CHART_DATA:\r\n            return {\r\n                ...state,\r\n                guardianChartData: payload\r\n            };\r\n        case types.GUARDIAN.RESET_GUARDIAN:\r\n            return {\r\n                ...state,\r\n                guardianChartData: undefined,\r\n                selectedGuardian: undefined,\r\n                guardianNotFound: false,\r\n                guardianIsLoading: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { OverviewState } from '../types/overview-types';\r\nimport { types } from '../types/types';\r\n\r\nconst initialState: OverviewState = {\r\n    overviewData: undefined,\r\n    overviewChartData: undefined,\r\n    overviewDataLoding: true\r\n};\r\n\r\nexport const overviewReducer = (state = initialState, { payload, type }: any): OverviewState => {\r\n    switch (type) {\r\n        case types.OVERVIEW.SET_OVERVIEW:\r\n            return {\r\n                ...state,\r\n                overviewData: payload,\r\n                overviewDataLoding: false\r\n            };\r\n        case types.OVERVIEW.SET_CHART_DATA:\r\n            return {\r\n                ...state,\r\n                overviewChartData: payload\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { connectRouter } from 'connected-react-router';\r\nimport { authReducer } from './auth-reducer';\r\nimport { delegatorReducer } from './delegator';\r\nimport { guardiansReducer } from './guardians';\r\nimport { overviewReducer } from './overview';\r\n\r\nconst rootReducer = (history: any) =>\r\n    combineReducers({\r\n        router: connectRouter(history),\r\n        auth: authReducer,\r\n        delegator: delegatorReducer,\r\n        guardians: guardiansReducer,\r\n        overview: overviewReducer\r\n    });\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\n\r\nimport { routerMiddleware } from 'connected-react-router';\r\nimport reduxThunk from 'redux-thunk';\r\nimport { createBrowserHistory } from 'history';\r\n\r\nimport reducers from '../reducers/reducers';\r\nconst history = createBrowserHistory();\r\n\r\nconst store = createStore(reducers(history), {}, compose(applyMiddleware(routerMiddleware(history), reduxThunk)));\r\nexport default store;\r\n","import process from 'process';\n\nconst development: boolean = !process.env.NODE_ENV || process.env.NODE_ENV === 'development';\n\nexport default function isDev(): boolean {\n    return development;\n}\nconst ENV = isDev() ? require('./env.dev') : require('./env.prod');\n\nexport { ENV };\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport isDev from '../config/env';\n\nconst en = require('./en');\nconst fr = require('./fr');\n\nconst resources = {\n    en: {\n        translation: en\n    },\n    fr: {\n        translation: fr\n    }\n};\n\ni18n.use(initReactI18next)\n    .use(LanguageDetector)\n    .init({\n        resources,\n        supportedLngs: ['en', 'fr'],\n        fallbackLng: 'en',\n        keySeparator: '.',\n        interpolation: {\n            escapeValue: false\n        },\n        debug: isDev()\n    });\n\nexport default i18n;\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { Provider } from \"react-redux\"\nimport {  ConnectedRouter } from \"connected-react-router\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport { createBrowserHistory } from \"history\";\nimport App from \"./app\"\nimport store from \"./redux/store/store\"\nimport './i18n';\n\nconst history = createBrowserHistory()\n\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n    <App />\n    </ConnectedRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n)\nserviceWorker.unregister()\n","module.exports = __webpack_public_path__ + \"static/media/copy.5ae6ccfe.svg\";"],"sourceRoot":""}