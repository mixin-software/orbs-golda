{"version":3,"sources":["assets/images/loupe.svg","services/api/api.ts","assets/images/token.svg","assets/images/overview-icon.svg","assets/images/guardians-icon.svg","assets/images/deligators-icon.svg","assets/images/navbar-logo.svg","assets/images/cpu.svg","assets/images/encrypted.svg","services/api/index.ts","config/env.dev.ts","config/env.prod.ts","serviceWorker.ts","global/enums.ts","redux/types/types.ts","redux/actions/delegator-actions.ts","redux/actions/guardians-actions.ts","routes/routes.ts","components/loaders/big-loader.tsx","components/loaders/text-loader.tsx","components/loaders/list-loader.tsx","components/loading-component/loading-component.tsx","utils/dates.ts","utils/array.ts","utils/delegators.ts","utils/number.ts","screens/deligators/sections/delegators-actions/components/delegator-action.tsx","keys/keys.ts","components/no-data/no-data.tsx","screens/deligators/sections/delegators-actions/deligators-actions.tsx","components/date-format-picker/time-range-selector.tsx","utils/chart.ts","screens/deligators/sections/delegators-stake/components/delegator-stake-chart/chart.tsx","screens/deligators/sections/delegators-stake/components/delegator-stake-chart/delegator-stake-chart.tsx","global/variables.ts","utils/guardians.ts","utils/routing.ts","screens/deligators/sections/delegators-stake/components/delegators-stake-balance/delegators-stake-balance.tsx","screens/deligators/sections/delegators-stake/delegators-stake.tsx","screens/deligators/sections/delegators-reward/delegators-reward.tsx","screens/deligators/components/delegator-search/delegator-search.tsx","components/section-menu/section-menu.tsx","screens/deligators/components/delegator-sections-selector/delegator-section-selector.tsx","screens/deligators/delegators.tsx","utils/navigation.ts","components/navigation-menu/navigation-menu.tsx","screens/guardians/sections/guardian-delegators/components/guardian-delegator/guardian-delegator.tsx","screens/guardians/sections/guardian-delegators/guardian-delegators.tsx","screens/guardians/sections/guardians-stake/components/guardian-stake-chart/chart.tsx","screens/guardians/sections/guardians-stake/components/guardian-stake-chart/guardian-stake-chart.tsx","screens/guardians/sections/guardians-stake/components/guardian-stake-legend/guardian-stake-legend.tsx","screens/guardians/sections/guardians-stake/guardians-stake.tsx","screens/guardians/components/guardian-search/guardian-search.tsx","screens/guardians/components/guardian-section-select/guardian-section-select.tsx","screens/guardians/guardians.tsx","ui/colors.ts","utils/overview.ts","screens/overview/components/overview-section-selector/overview-section-selector.tsx","screens/overview/components/overview-top/overview-top.tsx","components/bar-chart/bar-chart.tsx","screens/overview/sections/overview-stake/components/overview-stake-chart/overview-stake-chart.tsx","redux/actions/overview-actions.ts","screens/overview/sections/overview-stake/components/overview-stake-guardians/overview-stake-guardians.tsx","screens/overview/sections/overview-stake/overview-stake.tsx","screens/overview/overview.tsx","routes/root-router.tsx","app.tsx","redux/reducers/auth-reducer.ts","redux/reducers/delegator.ts","redux/reducers/guardians.ts","redux/reducers/overview.ts","redux/reducers/reducers.ts","redux/store/store.ts","config/env.ts","i18n/i18n.ts","index.tsx","assets/images/copy.svg"],"names":["module","exports","api","ethereumEndpoint","nodeEndpoints","address","getDelegator","this","res","undefined","getGuardian","getGuardians","getOverview","ENV","Boolean","window","location","hostname","match","DelegatorsSections","GuardiansSections","OverviewSections","LoaderType","DeligatorActionsTypes","TimeRangeSelectorOptions","SearchListType","ChartUnit","ChartColors","ChartYaxis","types","SET_DELEGATOR","DELEGATOR_NOT_FOUND","DELEGATOR_LOADING","CLEAR_DELEGATOR","SET_DELEGATOR_CHART_DATA","RESET_DELEGATOR","SET_GUARDIANS","SET_GUARDIAN","GUARDIAN_NOT_FOUND","GUARDIAN_LOADING","SET_GUARDIAN_CHART_DATA","RESET_GUARDIAN","SET_OVERVIEW","SET_CHART_DATA","setDelegator","delegator","dispatch","a","type","payload","delegatorLoading","value","delegatorNotFound","resetDelegator","setGuardianLoading","setGuardianNotFound","resetguardian","routes","overview","main","stake","weights","guardians","rewards","delegators","actions","BigLoader","className","TextLoader","ListLoader","listElementAmount","Array","apply","map","m","i","key","index","LoadingComponent","loaderType","isLoading","children","TEXT","BIG","LIST","renderContent","generateMonths","limit","dates","moment","subtract","month","generateWeeks","week","generateDays","days","dayOfYear","returnDateNumber","date","unit","MONTH","unix","getMonthNumberFromUnixDate","WEEK","getWeekNumberFromUnixDate","DAY","getDayNumberFromUnixDate","sortByDate","arr","sort","b","x","diff","generateDelegatorsRoutes","t","name","route","replace","STAKE","REWARDS","disabled","ACTIONS","getDelegatorChartData","stake_slices","slice","block_time","hasOwnProperty","datasetObject","format","y","push","datasets","data","color","GRAY","yAxis","Y1","numeral","require","formatNumber","num","convertToString","defaultString","Number","toFixed","toLocaleString","DelegatorActionElement","action","amount","block_number","event","to","currentStake","useTranslation","STAKED","RESTAKED","UNSTAKED","WITHDREW","generateGuardiansActionColors","isDeligated","DELEGATED","src","LinkIcon","alt","generateAction","style","href","target","rel","NoData","DeligatorsActions","useSelector","state","selectedDelegator","delegatorIsLoading","titles","utcOffset","title","TimeRangeSelector","selectCallBack","selected","options","option","onClick","select","getLineChartBaseSettings","maintainAspectRatio","responsive","margin","elements","line","tension","legend","display","layout","padding","right","bottom","animation","duration","interaction","mode","tooltips","xPadding","yPadding","titleFontFamily","bodyFontFamily","displayColors","cornerRadius","callbacks","label","tooltipItem","datasetIndex","Math","round","yLabel","labelColor","borderColor","backgroundColor","scales","xAxes","time","scaleLabel","labelString","gridLines","tickMarkLength","drawBorder","zeroLineColor","ticks","autoskip","fontSize","fontFamily","fontColor","yAxes","id","position","borderDash","zeroLineBorderDash","maxTicksLimit","callback","toUpperCase","generateDatasets","chartData","styles","fill","lineTension","borderCapStyle","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","yAxisID","dataset","Chart","DelegatorStakeChart","useDispatch","delegatorChartData","useEffect","selectChartData","months","weeks","generateDelegatorChartData","generateGuardiansRoutes","guardian","DELEGATORS","getGuardianChartData","dataObject","selfStake","Y2","delegatedStake","YELLOW","GREEN","insertChartDataByType","formatGuardianChartData","datasetsArr","Object","keys","self_stake","n_delegates","delegated_stake","selftStake","getGuardianByAddress","filter","g","routeToGuardian","DelegatorsStakeBalanceSection","text","TokenImg","DelegatorsStakeBalance","delegatedTo","delegated_to","total_stake","cool_down_stake","non_stake","DelegatorsStake","DelegatorsReward","DelegatorSearch","useClickOutside","ref","hasClickedOutside","useState","inputValue","setInputValue","history","useHistory","params","useParams","pushAddressAndFindDelegator","section","findDelegator","toLowerCase","checkIfLoadDeligator","getDelegatorApi","findDelegatorAction","LoupeImg","onKeyUp","e","keyCode","submit","onChange","onPaste","clipboardData","getData","handlePaste","placeholder","generateClassName","toLocaleLowerCase","SectionMenu","setSelected","newSelected","pathname","DelegatorSectionSelector","Delegators","React","memo","path","render","getAddress","obj","NavigationMenu","selectedGuardian","Logo","image","overviewIcon","guardiansIcon","deligatorsIcon","generateNavigationLinks","link","GuardianDelegatorElement","CopyImg","GuardianDelegators","guardianIsLoading","settings","axis","getGuardiansLineChartSettings","GuardianStakeChart","guardianChartData","generateGuardiansChartData","GuardianStakeLegend","legends","background","GuardiansStake","GuardianSearch","showResults","setShowResults","findGuardianOnLoad","findGuardian","checkIfLoadDelegator","getGuardianApi","console","log","getGuardianAction","searchByAddress","setGuardianNameAsValue","string","length","list","onFocus","indexOf","result","GuardianSectionSelect","Guardians","overviewguardiansColors","generateOverviewRoutes","WEIGHTS","getGuardianColor","count","getOverviewChartData","overviewData","slices","order","sortedGuardians","propertyName","asc","sortByNumber","guardiansObject","forEach","getSortedGuardiansOrder","datesInUse","includes","orderObject","orderArr","checkIfEmptyDate","previousData","number","converFromNumberToDate","OverviewSectionSelector","OverviewTopSection","textTop","textBottom","imgSrc","btnText","OverviewTop","TotalStakeImg","n_candidates","n_guardians","GuardiansImg","BarChartComponent","barChartData","colors","elem","effectiveStake","maxBarThickness","addToDataset","generateDataset","intersect","enabled","offset","stacked","OverviewStakeChart","overviewChartData","overviewDataLoding","generateOverviewChartData","setOverviewChartData","OverviewStakeGuadians","OverviewStake","Overview","RootRouter","basename","process","exact","App","getGuardiansApi","getOverviewApi","initialState","token","authReducer","delegatorReducer","guardianNotFound","guardiansReducer","overviewReducer","rootReducer","combineReducers","router","connectRouter","auth","createBrowserHistory","store","createStore","reducers","compose","applyMiddleware","routerMiddleware","reduxThunk","development","env","NODE_ENV","isDev","resources","en","translation","fr","i18n","use","initReactI18next","LanguageDetector","init","supportedLngs","fallbackLng","keySeparator","interpolation","escapeValue","debug","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8201cfb4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loupe.4d58c39b.svg\";","import { getDelegator, getGuardian, getGuardians, getOverview } from '@orbs-network/pos-analytics-lib';\n\nclass Api {\n    ethereumEndpoint = 'https://mainnet.infura.io/v3/9679dc4f2d724f7997547f05f769d74e';\n    nodeEndpoints = ['https://guardian.v2beta.orbs.com/services/management-service/status'];\n    async getDelegatorApi(address: string) {\n        try {\n            const res = await getDelegator(address, this.ethereumEndpoint);\n            return res;\n        } catch (error) {\n            return undefined;\n        }\n    }\n\n    async getGuardianApi(address: string) {\n        try {\n            const res = await getGuardian(address, this.ethereumEndpoint);\n            return res;\n        } catch (error) {\n            return undefined;\n        }\n    }\n\n    async getGuardiansApi() {\n        try {\n            const res = await getGuardians(this.nodeEndpoints);\n            return res;\n        } catch (error) {\n            return null;\n        }\n    }\n    async getOverviewApi() {\n        try {\n            const res = await getOverview(this.nodeEndpoints, this.ethereumEndpoint);\n            return res;\n        } catch (error) {\n            return null;\n        }\n    }\n}\nexport const api = new Api();\n","module.exports = __webpack_public_path__ + \"static/media/token.dd5bc28e.svg\";","module.exports = __webpack_public_path__ + \"static/media/overview-icon.091557cd.svg\";","module.exports = __webpack_public_path__ + \"static/media/guardians-icon.57aad41c.svg\";","module.exports = __webpack_public_path__ + \"static/media/deligators-icon.95190aa2.svg\";","module.exports = __webpack_public_path__ + \"static/media/navbar-logo.863932b6.svg\";","module.exports = __webpack_public_path__ + \"static/media/cpu.3ee6411f.svg\";","module.exports = __webpack_public_path__ + \"static/media/encrypted.fc6fbf16.svg\";","export * from './api';\nexport * from './api.types';\n","export const ENV = {};\n","export const ENV = {};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' }\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","export enum DelegatorsSections {\n    STAKE = 'STAKE',\n    REWARDS = 'REWARDS',\n    ACTIONS = 'ACTIONS'\n}\n\nexport enum GuardiansSections {\n    STAKE = 'STAKE',\n    REWARDS = 'REWARDS',\n    DELEGATORS = 'DELEGATORS'\n}\n\nexport enum OverviewSections {\n    STAKE = 'STAKE',\n    WEIGHTS = 'WEIGHTS'\n}\n\nexport enum LoaderType {\n    TEXT = 'TEXT',\n    BIG = 'BIG',\n    LIST = 'LIST'\n}\n\nexport enum DeligatorActionsTypes {\n    STAKED = 'Staked',\n    RESTAKED = 'Restaked',\n    WITHDREW = 'Withdrew',\n    DELEGATED = 'Delegated',\n    UNSTAKED = 'Unstaked'\n}\n\nexport enum TimeRangeSelectorOptions {\n    DAYS = 'DAYS',\n    WEEKS = 'WEEKS',\n    MONTHS = 'MONTHS'\n}\n\nexport enum SearchListType {\n    GUARDIAN = 'GUARDIAN',\n    DELEGATOR = 'DELEGATOR'\n}\n\nexport enum ChartUnit {\n    DAY = 'day',\n    MONTH = 'month',\n    WEEK = 'week'\n}\n\nexport enum ChartColors {\n    YELLOW = '#FFEC29',\n    GRAY = '#CF4E81',\n    GREEN = '#74DABF'\n}\n\nexport enum ChartYaxis {\n    Y1 = 'y1',\n    Y2 = 'y2'\n}\n","import { AuthState } from './auth-types';\nimport { DelegatorState } from './delegator-types';\nimport { GuardiansState } from './guardians-types';\nimport { OverviewState } from './overview-types';\n\nexport const types = {\n    SET_DATA_TO_GLOBAL_REDUCER: 'SET_DATA_TO_GLOBAL_REDUCER',\n    LOGIN: 'LOGIN',\n\n    DELEGATOR: {\n        SET_DELEGATOR: 'SET_DELEGATOR',\n        DELEGATOR_NOT_FOUND: 'DELEGATOR_NOT_FOUND',\n        DELEGATOR_LOADING: 'DELEGATOR_LOADING',\n        CLEAR_DELEGATOR: 'CLEAR_DELEGATOR',\n        SET_DELEGATOR_CHART_DATA: 'SET_DELEGATOR_CHART_DATA',\n        RESET_DELEGATOR: 'RESET_DELEGATOR'\n    },\n    GUARDIAN: {\n        SET_GUARDIANS: 'SET_GUARDIANS',\n        SET_GUARDIAN: 'SET_GUARDIAN',\n        GUARDIAN_NOT_FOUND: 'GUARDIAN_NOT_FOUND',\n        GUARDIAN_LOADING: 'GUARDIAN_LOADING',\n        SET_GUARDIAN_CHART_DATA: 'SET_GUARDIAN_CHART_DATA',\n        RESET_GUARDIAN: 'RESET_GUARDIAN'\n    },\n    OVERVIEW: {\n        SET_OVERVIEW: 'SET_OVERVIEW',\n        SET_CHART_DATA: 'SET_CHART_DATA'\n    }\n};\n\nexport interface AppState {\n    auth: AuthState;\n    delegator: DelegatorState;\n    guardians: GuardiansState;\n    overview: OverviewState;\n}\n","import { Delegator } from '@orbs-network/pos-analytics-lib';\nimport { Dispatch } from 'redux';\nimport { ChartData } from '../../global/types';\nimport { api } from '../../services/api';\nimport { types } from '../types/types';\n\nexport const findDelegatorAction = (address: string) => async (dispatch: any) => {\n    dispatch(resetDelegator());\n    const delegator = await api.getDelegatorApi(address);\n    dispatch(delegatorLoading(false));\n    if (!delegator) {\n        return dispatch(delegatorNotFound(true));\n    }\n    dispatch(setDelegator(delegator));\n};\n\nconst setDelegator = (delegator: Delegator) => async (dispatch: any) => {\n    dispatch({\n        type: types.DELEGATOR.SET_DELEGATOR,\n        payload: delegator\n    });\n};\n\nexport const delegatorLoading = (value: boolean) => async (dispatch: any) => {\n    return dispatch({\n        type: types.DELEGATOR.DELEGATOR_LOADING,\n        payload: value\n    });\n};\n\nexport const delegatorNotFound = (value: boolean) => async (dispatch: any) => {\n    return dispatch({\n        type: types.DELEGATOR.DELEGATOR_NOT_FOUND,\n        payload: value\n    });\n};\n\nexport const setDelegatorChartData = (chartData: ChartData | undefined) => async (dispatch: Dispatch<any>) => {\n    return dispatch({\n        type: types.DELEGATOR.SET_DELEGATOR_CHART_DATA,\n        payload: chartData\n    });\n};\n\nexport const resetDelegator = () => async (dispatch: any) => {\n    return dispatch({\n        type: types.DELEGATOR.RESET_DELEGATOR\n    });\n};\n","import { ChartData } from '../../global/types';\nimport { api } from '../../services/api';\nimport { types } from '../types/types';\n\nexport const getGuardianAction = (address: string) => async (dispatch: any) => {\n    dispatch(resetguardian());\n    const guardian = await api.getGuardianApi(address);\n    dispatch(setGuardianLoading(false));\n    if (!guardian) {\n        return dispatch(setGuardianNotFound(true));\n    }\n    console.log(guardian);\n    dispatch({\n        type: types.GUARDIAN.SET_GUARDIAN,\n        payload: guardian\n    });\n};\n\nexport const getGuardiansAction = () => async (dispatch: any) => {\n    const guardians = await api.getGuardiansApi();\n    if (!guardians) return null;\n    return dispatch({\n        type: types.GUARDIAN.SET_GUARDIANS,\n        payload: guardians\n    });\n};\n\nexport const setGuardianLoading = (value: boolean) => async (dispatch: any) => {\n    return dispatch({\n        type: types.GUARDIAN.GUARDIAN_LOADING,\n        payload: value\n    });\n};\n\nexport const setGuardianNotFound = (value: boolean) => async (dispatch: any) => {\n    return dispatch({\n        type: types.GUARDIAN.GUARDIAN_NOT_FOUND,\n        payload: value\n    });\n};\n\nexport const setGuardianChartData = (chartData: ChartData | undefined) => async (dispatch: any) => {\n    return dispatch({\n        type: types.GUARDIAN.SET_GUARDIAN_CHART_DATA,\n        payload: chartData\n    });\n};\n\nexport const resetguardian = () => async (dispatch: any) => {\n    return dispatch({\n        type: types.GUARDIAN.RESET_GUARDIAN\n    });\n};\n","export const routes = {\n    overview: {\n        main: '/overview/:section?',\n        stake: '/overview/stake',\n        weights: '/overview/weights'\n    },\n    guardians: {\n        main: '/guardians/:section?/:address?',\n        stake: '/guardians/stake/:address?',\n        rewards: '/guardians/rewards/:address?',\n        delegators: '/guardians/delegators/:address?'\n    },\n    delegators: {\n        main: '/delegators/:section?/:address?',\n        stake: '/delegators/stake/:address?',\n        rewards: '/delegators/rewards/:address?',\n        actions: '/delegators/actions/:address?'\n    }\n};\n","import React from 'react'\nimport './loaders.scss';\n\nexport const BigLoader = () => {\n    return (\n        <div className='loader loader-big'>\n            <figure></figure>\n        </div>\n    )\n}\n\n","import React from 'react'\nimport './loaders.scss';\n\nexport const TextLoader = () => {\n    return (\n        <div className='loader loader-text'>\n            <figure></figure>\n        </div>\n    )\n}\n\n","import React from 'react'\nimport './loaders.scss';\nimport { TextLoader } from './text-loader';\n\ninterface StateProps {\n    listElementAmount: number;\n}\n\nexport const ListLoader = ({listElementAmount}: StateProps) => {\n    return (\n            <ul className='loader-list'>\n                {Array.apply(null, Array(6)).map((m: any, i: number) => {\n                    return <li key = {i} className='flex-start-center loader-list-element'>\n                        {\n                            Array.apply(null, Array(listElementAmount)).map((m: any, index: number) => {\n                                return <div key = {index}> <TextLoader /></div>\n                            })\n                        }\n                            \n                            \n                    </li>\n                })}\n            </ul>\n      \n    )\n}\n\n","import React, { Children } from 'react';\nimport { LoaderType } from '../../global/enums';\nimport { BigLoader } from '../loaders/big-loader';\nimport { ListLoader } from '../loaders/list-loader';\nimport { TextLoader } from '../loaders/text-loader';\n\ninterface StateProps {\n    loaderType: LoaderType;\n    isLoading: boolean;\n    children: any;\n    listElementAmount?: number;\n}\n\nexport const LoadingComponent = ({ loaderType, isLoading, children, listElementAmount }: StateProps) => {\n    const renderContent = () => {\n        switch (loaderType) {\n            case LoaderType.TEXT:\n                return <TextLoader />;\n            case LoaderType.BIG:\n                return <BigLoader />;\n            case LoaderType.LIST:\n                if (!listElementAmount) return null;\n                return <ListLoader listElementAmount={listElementAmount} />;\n            default:\n                break;\n        }\n    };\n\n    return isLoading ? renderContent() : children;\n};\n","import { Console } from 'console';\nimport moment from 'moment';\nimport { ChartUnit } from '../global/enums';\n\nexport const generateMonths = (limit: number) => {\n    let dates: any = {};\n    for (let i = 0; i <= limit; i++) {\n        const month = moment().subtract(i, 'month').month();\n        dates[month] = [];\n    }\n    return dates;\n};\n\nexport const generateWeeks = (limit: number) => {\n    let dates: any = {};\n    for (let i = 0; i <= limit; i++) {\n        const week = moment().subtract(i, 'week').week();\n        dates[week] = [];\n    }\n    return dates;\n};\n\nexport const generateDays = (limit: number) => {\n    let days: any = {};\n    for (let i = 0; i <= limit; i++) {\n        const day = moment().subtract(i, 'day').dayOfYear();\n        days[day] = [];\n    }\n    return days;\n};\n\nexport const getDayNumberFromUnixDate = (date: number): number => {\n    return moment.unix(date).dayOfYear();\n};\n\nexport const getWeekNumberFromUnixDate = (date: number): number => {\n    return moment.unix(date).week();\n};\n\nexport const getMonthNumberFromUnixDate = (date: number): number => {\n    return moment.unix(date).month();\n};\n\nexport const returnDateNumber = (date: number, unit: ChartUnit) => {\n    switch (unit) {\n        case ChartUnit.MONTH:\n            return getMonthNumberFromUnixDate(date);\n        case ChartUnit.WEEK:\n            return getWeekNumberFromUnixDate(date);\n        case ChartUnit.DAY:\n            return getDayNumberFromUnixDate(date);\n        default:\n            break;\n    }\n};\n\nexport const converFromNumberToDate = (number: number, unit: ChartUnit, format: string): string | undefined => {\n    switch (unit) {\n        case ChartUnit.MONTH:\n            return moment().month(number).format(format);\n        case ChartUnit.WEEK:\n            return moment().week(number).format(format);\n        case ChartUnit.DAY:\n            return moment().dayOfYear(number).format(format);\n        default:\n            break;\n    }\n};\n","import moment from 'moment';\n\nexport const sortByDate = (arr: any) => {\n    if (!arr) return;\n    return arr.sort((a: any, b: any) => {\n        return moment(a.x, 'DD/MM/YYYY').diff(moment(b.x, 'DD/MM/YYYY'));\n    });\n};\n\nexport const sortByNumber = (arr: any, propertyName: string, asc?: boolean) => {\n    if (!arr) return;\n    return arr.sort((a: any, b: any) => {\n        return asc ? a[propertyName] - b[propertyName] : b[propertyName] - a[propertyName];\n    });\n};\n","import { Delegator, DelegatorStake } from '@orbs-network/pos-analytics-lib';\nimport { TFunction } from 'i18next';\nimport { ChartColors, ChartUnit, ChartYaxis, DelegatorsSections, DeligatorActionsTypes } from '../global/enums';\nimport { ChartData, ChartDatasetObject, MenuOption } from '../global/types';\nimport { routes } from '../routes/routes';\nimport moment from 'moment';\nimport { generateDays, generateMonths, generateWeeks, returnDateNumber } from './dates';\nimport { sortByDate } from './array';\nimport { STACK_GRAPH_MONTHS_LIMIT } from '../global/variables';\nexport const generateDelegatorsRoutes = (t: TFunction, delegator?: Delegator): MenuOption[] => {\n    const address = delegator ? delegator.address : '';\n    return [\n        {\n            name: t('main.stake'),\n            route: routes.delegators.stake.replace(':address', address),\n            key: DelegatorsSections.STAKE\n        },\n        {\n            name: t('main.rewards'),\n            route: routes.delegators.rewards.replace(':address', address),\n            key: DelegatorsSections.REWARDS,\n            disabled: true\n        },\n        {\n            name: t('main.actions'),\n            route: routes.delegators.actions.replace(':address', address),\n            key: DelegatorsSections.ACTIONS\n        }\n    ];\n};\n\nexport const checkIfLoadDeligator = (address?: string, delegator?: Delegator): boolean => {\n    if (!address) return false;\n    if (!delegator) return true;\n    if (delegator.address.toLowerCase() === address.toLowerCase()) return false;\n    return true;\n};\n\nexport const getDelegatorChartData = (dates: any, unit: ChartUnit, delegator: Delegator): ChartData => {\n    const { stake_slices } = delegator;\n    let arr: ChartDatasetObject[] = [];\n    stake_slices.map((slice: DelegatorStake) => {\n        const { block_time, stake } = slice;\n        const date = returnDateNumber(block_time, unit);\n        if (!dates.hasOwnProperty(date)) return;\n        const datasetObject = {\n            x: moment.unix(block_time).format('DD/MM/YYYY'),\n            y: stake\n        };\n        arr.push(datasetObject);\n    });\n    const dataset = {\n        data: sortByDate(arr),\n        color: ChartColors.GRAY,\n        yAxis: ChartYaxis.Y1\n    };\n    return {\n        datasets: [dataset],\n        unit\n    };\n};\n\nexport const generateGuardiansActionColors = (event: DeligatorActionsTypes) => {\n    switch (event) {\n        case DeligatorActionsTypes.STAKED:\n            return 'green';\n        case DeligatorActionsTypes.RESTAKED:\n            return 'green';\n        case DeligatorActionsTypes.UNSTAKED:\n            return 'red';\n        case DeligatorActionsTypes.WITHDREW:\n            return 'red';\n        default:\n            break;\n    }\n};\n\nexport const generateDelegatorChartData = (type: ChartUnit, selectedDelegator?: Delegator): ChartData | undefined => {\n    if (!selectedDelegator) return;\n    let data;\n    switch (type) {\n        case ChartUnit.MONTH:\n            const months = generateMonths(STACK_GRAPH_MONTHS_LIMIT);\n            data = getDelegatorChartData(months, ChartUnit.MONTH, selectedDelegator);\n            break;\n        case ChartUnit.WEEK:\n            const weeks = generateWeeks(STACK_GRAPH_MONTHS_LIMIT);\n            data = getDelegatorChartData(weeks, ChartUnit.WEEK, selectedDelegator);\n            break;\n        case ChartUnit.DAY:\n            const days = generateDays(20);\n            data = getDelegatorChartData(days, ChartUnit.DAY, selectedDelegator);\n            break;\n        default:\n            break;\n    }\n    return data;\n};\n\nexport const generateDelegatorSearcElement = (delegator: Delegator) => {\n    const { address } = delegator;\n    return {\n        name: address,\n        address: address\n    };\n};\n","const numeral = require('numeral');\n\nexport const formatNumber = (num: number, format: string): string => {\n    return numeral(num).format(format);\n};\n\nexport const convertToString = (num?: number, defaultString?: string): number | string => {\n    if (!num) return defaultString || '0';\n    return Number(num.toFixed(0)).toLocaleString();\n};\n","import { DelegatorAction } from '@orbs-network/pos-analytics-lib';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { DeligatorActionsTypes } from '../../../../../global/enums';\nimport { routes } from '../../../../../routes/routes';\nimport { generateGuardiansActionColors } from '../../../../../utils/delegators';\nimport LinkIcon from '../../../../../assets/images/copy.svg';\nimport { convertToString } from '../../../../../utils/number';\nimport { ETHERSCAN_BLOCK_ADDRESS } from '../../../../../keys/keys';\nimport moment from 'moment';\nimport { useTranslation } from 'react-i18next';\n\ninterface StateProps {\n    action: DelegatorAction;\n}\n\nexport const DelegatorActionElement = ({ action }: StateProps) => {\n    const { amount, block_time, block_number, event, to, currentStake } = action;\n    const { t } = useTranslation();\n\n    const generateAction = () => {\n        const isDeligated = event === DeligatorActionsTypes.DELEGATED;\n\n        if (isDeligated && to) {\n            return (\n                <div className=\"list-item\">\n                    {isDeligated ? <p>{t('delegators.delegatedTo')}</p> : <p>{event}</p>}\n                    <section className=\"list-item-tooltip\">\n                        <Link to={routes.guardians.stake.replace(':address', to)} className=\"flex-start-center\">\n                            <p className=\"text-overflow\">{to}</p>\n                            <figure className=\"flex-start-center\">\n                                {to} <img src={LinkIcon} alt=\"\" />\n                            </figure>\n                        </Link>\n                    </section>\n                </div>\n            );\n        }\n        return <p className=\"list-item\">{event}</p>;\n    };\n    const color = generateGuardiansActionColors(event as DeligatorActionsTypes);\n    return (\n        <li className=\"flex-start-center\">\n            {generateAction()}\n            <p className=\"list-item\" style={{ color }}>\n                {convertToString(amount, '-')}\n            </p>\n            <p className=\"list-item\">{convertToString(currentStake)}</p>\n            <a\n                href={`${ETHERSCAN_BLOCK_ADDRESS}/${block_number}`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"list-item\">\n                <p>{block_number}</p>\n            </a>\n            <p className=\"list-item\">{moment.unix(block_time).format('YYYY-MM-DD HH:mm')}</p>\n        </li>\n    );\n};\n","export const API = '';\nexport const ETHERSCAN_BLOCK_ADDRESS = 'https://etherscan.io/block';\n","import React from 'react'\nimport { useTranslation } from 'react-i18next'\nimport  './no-data.scss';\n\nexport const NoData = () => {\n    const {t} = useTranslation()\n    return (\n        <div className='no-data flex-center'>\n           <p> {t('main.noData')}</p>\n        </div>\n    )\n}\n\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { AppState } from '../../../../redux/types/types';\nimport moment from 'moment';\nimport './deligators-actions.scss';\nimport { LoadingComponent } from '../../../../components/loading-component/loading-component';\nimport { LoaderType } from '../../../../global/enums';\nimport { DelegatorAction } from '@orbs-network/pos-analytics-lib';\nimport { DelegatorActionElement } from './components/delegator-action';\nimport { NoData } from '../../../../components/no-data/no-data';\nimport { sortByDate } from '../../../../utils/array';\n\nexport const DeligatorsActions = () => {\n    const { selectedDelegator, delegatorIsLoading } = useSelector((state: AppState) => state.delegator);\n    const titles = ['Action', 'Amount','Current stake','Block #', `Time (GMT+${moment(moment().utcOffset()).format('H')})`];\n\n    return (\n        <div className=\"deligators-actions\">\n            <div className=\"list deligators-actions-list\">\n               {selectedDelegator &&  <header className=\"list-header flex-start-center\">\n                    {titles.map((title: any, index: number) => {\n                        return (\n                            <h3 key={index} className=\"list-item\">\n                                {title}\n                            </h3>\n                        );\n                    })}\n                </header>}\n                <LoadingComponent isLoading={delegatorIsLoading} loaderType={LoaderType.LIST} listElementAmount={4}>\n                    <ul>\n                        {selectedDelegator && selectedDelegator.actions ? (\n                            sortByDate(selectedDelegator.actions).map((action: DelegatorAction, index: number) => {\n                                return <DelegatorActionElement action={action} key={index} />;\n                            })\n                        ) : (\n                            <NoData />\n                        )}\n                    </ul>\n                </LoadingComponent>\n            </div>\n        </div>\n    );\n};\n","import React, { useState } from 'react'\nimport { useTranslation } from 'react-i18next';\nimport { ChartUnit, TimeRangeSelectorOptions } from '../../global/enums';\nimport './time-range-selector.scss';\n\ninterface Option {\n    name: string;\n    unit: ChartUnit;\n}\ninterface StateProps {\n    selectCallBack: (value: ChartUnit) => void;\n    selected: ChartUnit;\n}\n\nexport const TimeRangeSelector = ({selectCallBack, selected}: StateProps ) =>  {\n    const {t} = useTranslation()\n    const options = [{name:t('main.months'), unit: ChartUnit.MONTH},{name:t('main.weeks'), unit: ChartUnit.WEEK},{name:t('main.days'), unit: ChartUnit.DAY}]\n\n    const select = (option: Option) => {\n        selectCallBack(option.unit)\n    }\n    \n    return (\n        <div className='time-range-selector flex-start-center'>\n               {options.map((option: Option, index: number) => {\n\n                   const className = selected === option.unit ? 'time-range-selector-btn time-range-selector-selected' : 'time-range-selector-btn'\n                   return <button \n                    onClick = {() => select(option)}\n                   className={className} key = {index}>{option.name}</button>\n               })}\n        </div>\n    )\n}\n\n","import { TFunction } from 'i18next';\nimport { ChartUnit, ChartYaxis } from '../global/enums';\nimport { ChartData, ChartDataset } from '../global/types';\nimport { convertToString, formatNumber } from './number';\n\nexport const getGuardiansLineChartSettings = (unit: ChartUnit, t: TFunction) => {\n    const settings = getLineChartBaseSettings(unit);\n    settings.scales.yAxes[0].scaleLabel.display = true;\n    settings.scales.yAxes[0].scaleLabel.labelString = t('guardians.delegators');\n    const axis: any = {\n        id: ChartYaxis.Y2,\n        scaleLabel: {\n            display: true,\n            labelString: t('guardians.totalAndOwn'),\n            fontSize: 12,\n            fontFamily: 'Montserrat',\n            fontColor: '#666666'\n        },\n        position: 'right',\n        display: true,\n        gridLines: {\n            display: true,\n            color: 'rgba(255,99,132,0.2)',\n            borderDash: [5],\n            zeroLineBorderDash: [5],\n            zeroLineColor: 'rgba(255,99,132,0.2)',\n            drawBorder: false\n        },\n        ticks: {\n            maxTicksLimit: 7,\n            fontSize: 12,\n            fontFamily: 'Montserrat',\n            fontColor: '#666666',\n            callback: function (value: number) {\n                return formatNumber(value, '0.0a').toUpperCase();\n            },\n            padding: 15\n        }\n    };\n    settings.scales.yAxes.push(axis);\n    return settings;\n};\n\nexport const getLineChartBaseSettings = (unit: ChartUnit) => {\n    return {\n        maintainAspectRatio: false,\n        responsive: true,\n        margin: 0,\n        type: 'line',\n        elements: {\n            line: {\n                tension: 0\n            }\n        },\n        legend: {\n            display: false\n        },\n        title: {\n            display: false\n        },\n        layout: {\n            padding: {\n                right: 10,\n                bottom: 3\n            }\n        },\n        animation: {\n            duration: 0\n        },\n        interaction: {\n            mode: 'index'\n        },\n        tooltips: {\n            xPadding: 10,\n            yPadding: 10,\n            titleFontFamily: 'Montserrat',\n            bodyFontFamily: 'Montserrat',\n            displayColors: false,\n            cornerRadius: 2,\n            callbacks: {\n                label: function (tooltipItem: any, data: any) {\n                    var label = data.datasets[tooltipItem.datasetIndex].label;\n                    label += Math.round(tooltipItem.yLabel * 100) / 100;\n                    return convertToString(Math.round(tooltipItem.yLabel * 100) / 100);\n                },\n                labelColor: function () {\n                    return {\n                        borderColor: 'transparent',\n                        backgroundColor: 'transparent'\n                    };\n                }\n            }\n        },\n        scales: {\n            xAxes: [\n                {\n                    type: 'time',\n                    time: {\n                        format: 'DD/MM/YYYY',\n                        unit\n                    },\n                    scaleLabel: {\n                        display: false,\n                        labelString: 'Date'\n                    },\n                    gridLines: {\n                        tickMarkLength: 10,\n                        display: false,\n                        drawBorder: false,\n                        zeroLineColor: 'rgba(255,99,132,0.2)'\n                    },\n                    ticks: {\n                        autoskip: true,\n                        padding: 5,\n                        fontSize: 12,\n                        fontFamily: 'Montserrat',\n                        fontColor: '#666666'\n                    }\n                }\n            ],\n            yAxes: [\n                {\n                    id: ChartYaxis.Y1,\n                    scaleLabel: {\n                        display: false,\n                        labelString: '',\n                        fontSize: 12,\n                        fontFamily: 'Montserrat',\n                        fontColor: '#666666'\n                    },\n                    position: 'left',\n                    gridLines: {\n                        display: true,\n                        color: 'rgba(255,99,132,0.2)',\n                        borderDash: [5],\n                        zeroLineBorderDash: [5],\n                        zeroLineColor: 'rgba(255,99,132,0.2)',\n                        drawBorder: false\n                    },\n\n                    ticks: {\n                        autoskip: true,\n                        maxTicksLimit: 7,\n                        fontSize: 12,\n                        fontFamily: 'Montserrat',\n                        fontColor: '#666666',\n                        callback: function (value: number) {\n                            return formatNumber(value, '0.0a').toUpperCase();\n                        },\n                        padding: 15\n                    }\n                }\n            ]\n        }\n    };\n};\n\nexport const getLineChartBaseStyles = () => {\n    return {\n        label: '0',\n        fill: false,\n        lineTension: 0,\n        backgroundColor: '',\n        borderColor: '',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: '',\n        pointBackgroundColor: '',\n        pointBorderWidth: 7,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: '',\n        pointHoverBorderColor: '',\n        pointHoverBorderWidth: 1,\n        pointRadius: 2,\n        pointHitRadius: 10,\n        yAxisID: ChartYaxis.Y1\n    };\n};\n\nexport const generateDatasets = (chartData: ChartData) => {\n    const styles = getLineChartBaseStyles();\n    return chartData.datasets.map((dataset: ChartDataset, index: number) => {\n        const { color, yAxis, data } = dataset;\n        const style = styles;\n        style.label = `${index}`;\n        style.borderColor = color;\n        style.pointBorderColor = color;\n        style.pointBackgroundColor = color;\n        style.pointHoverBackgroundColor = color;\n        style.pointHoverBorderColor = color;\n        style.yAxisID = yAxis;\n        return {\n            data,\n            ...style\n        };\n    });\n};\n","import React from 'react'\nimport { Line } from 'react-chartjs-2';\nimport { ChartData } from '../../../../../../global/types';\nimport { generateDatasets, getLineChartBaseSettings } from '../../../../../../utils/chart';\n\ninterface StateProps {\n    chartData: ChartData;\n}\n\nexport const Chart = ({ chartData }: StateProps) => {\n    const data = {\n        datasets: generateDatasets(chartData)\n    };\n    const options = getLineChartBaseSettings(chartData.unit);\n    return <Line data={data} options={options} />;\n};","import React, { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TimeRangeSelector } from '../../../../../../components/date-format-picker/time-range-selector';\nimport { LoadingComponent } from '../../../../../../components/loading-component/loading-component';\nimport { NoData } from '../../../../../../components/no-data/no-data';\nimport { ChartUnit, LoaderType } from '../../../../../../global/enums';\nimport { setDelegatorChartData } from '../../../../../../redux/actions/actions';\nimport { AppState } from '../../../../../../redux/types/types';\nimport { generateDelegatorChartData } from '../../../../../../utils/delegators';\nimport { Chart } from './chart';\nimport './delegator-stake-chart.scss';\n\n\n\nexport const DelegatorStakeChart = () => {\n    const dispatch = useDispatch();\n    const { selectedDelegator, delegatorIsLoading, delegatorChartData } = useSelector(\n        (state: AppState) => state.delegator\n    );\n    const { t } = useTranslation();\n    useEffect(() => {\n        if (delegatorChartData) return;\n        selectChartData(ChartUnit.MONTH);\n    }, [selectedDelegator && selectedDelegator.address]);\n\n    const selectChartData = (unit: ChartUnit) => {\n        const data = generateDelegatorChartData(unit, selectedDelegator);\n        dispatch(setDelegatorChartData(data));\n    };\n\n    return (\n        <div className=\"delegator-stake-chart\">\n            <LoadingComponent loaderType={LoaderType.BIG} isLoading={delegatorIsLoading && !delegatorChartData}>\n                {delegatorChartData ? (\n                    <>\n                        <header className=\"flex-between\">\n                            <h4>{t('delegators.stakeChangeOverTime')}</h4>\n                            <TimeRangeSelector selected={delegatorChartData.unit} selectCallBack={selectChartData} />\n                        </header>\n                        <div className=\"line-chart\">\n                            <Chart chartData={delegatorChartData} />\n                        </div>\n                    </>\n                ) : null}\n            </LoadingComponent>\n            {!delegatorIsLoading && !selectedDelegator && <NoData />}\n        </div>\n    );\n};\n","export const STACK_GRAPH_MONTHS_LIMIT = 9;\nexport const DATE_FORMAT = 'DD/MM/YYYY';\n","import { TFunction } from 'i18next';\nimport { ChartData, GuardianDataset, MenuOption } from '../global/types';\nimport { routes } from '../routes/routes';\nimport { ChartColors, ChartUnit, ChartYaxis, GuardiansSections } from '../global/enums';\nimport { Guardian, GuardianInfo, GuardianStake } from '@orbs-network/pos-analytics-lib';\nimport {\n    generateDays,\n    generateMonths,\n    generateWeeks,\n    getDayNumberFromUnixDate,\n    getMonthNumberFromUnixDate,\n    getWeekNumberFromUnixDate,\n    returnDateNumber\n} from './dates';\nimport { STACK_GRAPH_MONTHS_LIMIT } from '../global/variables';\nimport moment from 'moment';\nexport const generateGuardiansRoutes = (t: TFunction, guardian?: GuardianInfo): MenuOption[] => {\n    const address = guardian ? guardian.address : '';\n    return [\n        {\n            name: t('main.stake'),\n            route: routes.guardians.stake.replace(':address', address),\n            key: GuardiansSections.STAKE\n        },\n        {\n            name: t('main.rewards'),\n            route: routes.guardians.rewards.replace(':address', address),\n            key: GuardiansSections.REWARDS,\n            disabled: true\n        },\n        {\n            name: t('main.delegetors'),\n            route: routes.guardians.delegators.replace(':address', address),\n            key: GuardiansSections.DELEGATORS\n        }\n    ];\n};\n\nexport const checkIfLoadDelegator = (address?: string, guardian?: GuardianInfo): boolean => {\n    if (!address) return false;\n    if (guardian && guardian.address === address) return false;\n    return true;\n};\n\nconst generateObject = () => {\n    return {\n        selfStake: {\n            data: [],\n            color: ChartColors.GRAY,\n            yAxis: ChartYaxis.Y2\n        },\n        delegatedStake: {\n            data: [],\n            color: ChartColors.YELLOW,\n            yAxis: ChartYaxis.Y2\n        },\n        delegators: {\n            data: [],\n            color: ChartColors.GREEN,\n            yAxis: ChartYaxis.Y1\n        }\n    };\n};\nexport const getGuardianChartData = (months: any, unit: ChartUnit, guardian: GuardianInfo): ChartData => {\n    let dataObject: any = generateObject();\n    const { stake_slices } = guardian;\n    stake_slices.map((slice: GuardianStake) => {\n        const { block_time } = slice;\n        const date = returnDateNumber(block_time, unit);\n        if (!months.hasOwnProperty(date)) return;\n        dataObject = insertChartDataByType(dataObject, slice);\n    });\n    return formatGuardianChartData(dataObject, unit);\n};\n\nexport const formatGuardianChartData = (data: any, unit: ChartUnit) => {\n    let datasetsArr: any = [];\n    Object.keys(data).map(function (key) {\n        const dataset = data[key];\n        datasetsArr.push(dataset);\n    });\n    const obj = {\n        datasets: datasetsArr,\n        unit\n    };\n    return obj;\n};\n\nconst insertChartDataByType = (data: any, slice: GuardianStake): any => {\n    const { self_stake, n_delegates, block_time, delegated_stake } = slice;\n    const x = moment.unix(block_time).format('DD/MM/YYYY');\n    const selftStake = {\n        x,\n        y: self_stake\n    };\n    const delegators = {\n        x,\n        y: n_delegates\n    };\n    const delegatedStake = {\n        x,\n        y: delegated_stake\n    };\n    data.selfStake.data.push(selftStake);\n    data.delegators.data.push(delegators);\n    data.delegatedStake.data.push(delegatedStake);\n    return data;\n};\n\nexport const generateGuardiansChartData = (type: ChartUnit, selectedGuardian?: GuardianInfo) => {\n    if (!selectedGuardian) return;\n    let data;\n    switch (type) {\n        case ChartUnit.MONTH:\n            const months = generateMonths(STACK_GRAPH_MONTHS_LIMIT);\n            data = getGuardianChartData(months, ChartUnit.MONTH, selectedGuardian);\n            break;\n        case ChartUnit.WEEK:\n            const weeks = generateWeeks(STACK_GRAPH_MONTHS_LIMIT);\n            data = getGuardianChartData(weeks, ChartUnit.WEEK, selectedGuardian);\n            break;\n        case ChartUnit.DAY:\n            const days = generateDays(STACK_GRAPH_MONTHS_LIMIT);\n            data = getGuardianChartData(days, ChartUnit.DAY, selectedGuardian);\n            break;\n        default:\n            break;\n    }\n    return data;\n};\n\nexport const getGuardianByAddress = (guardians?: Guardian[], address?: string): Guardian | undefined => {\n    if (!guardians || !address) return;\n    const guardian = guardians.filter((g: Guardian) => {\n        return g.address === address;\n    })[0];\n    return guardian;\n};\n\nexport const filterGuardians = (list: Guardian[], value: string) => {\n    if (!value || !list) return list || [];\n    const filtered = list.filter((guardian: Guardian) => {\n        const { name, address } = guardian;\n        const string = `${name} ${address}`;\n        return string.toLowerCase().indexOf(value.toLowerCase()) > -1;\n    });\n    return filtered || [];\n};\n","import { routes } from '../routes/routes';\n\nexport const routeToGuardian = (address?: string): string => {\n    if (!address) return '';\n    return routes.guardians.stake.replace(':address', address);\n};\n\nexport const routeToDelegator = (address?: string): string => {\n    if (!address) return '';\n    return routes.delegators.stake.replace(':address', address);\n};\n","import React from 'react'\nimport { useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { LoadingComponent } from '../../../../../../components/loading-component/loading-component';\nimport { LoaderType } from '../../../../../../global/enums';\nimport { AppState } from '../../../../../../redux/types/types';\nimport { getGuardianByAddress } from '../../../../../../utils/guardians';\nimport { convertToString } from '../../../../../../utils/number';\nimport { routeToGuardian } from '../../../../../../utils/routing';\nimport TokenImg from '../../../../../../assets/images/token.svg';\nimport { useTranslation } from 'react-i18next';\n\ninterface StateProps {\n    isLoading: boolean;\n    text: string;\n    data: string | number;\n}\n\n\nconst DelegatorsStakeBalanceSection = ({ isLoading, text, data }: StateProps) => {\n    return (\n        <div className=\"flex-column\">\n            <h4 className=\"one-line capitalize\">{text}</h4>\n            <LoadingComponent loaderType={LoaderType.TEXT} isLoading={isLoading}>\n               <div className='flex-start-center'>\n               <p className=\"delegators-stake-balance-big\">{data}</p>\n                <img src={TokenImg} alt=\"\"  className='delegators-stake-balance-img'/>\n               </div>\n            </LoadingComponent>\n        </div>\n    );\n};\n\n\n\nexport const DelegatorsStakeBalance = () =>  {\n    const { selectedDelegator, delegatorIsLoading } = useSelector((state: AppState) => state.delegator);\n    const { guardians } = useSelector((state: AppState) => state.guardians);\n    const {t} = useTranslation()\n    const delegatedTo = getGuardianByAddress(guardians, selectedDelegator?.delegated_to )?.name\n\n    return (\n        <section className=\"delegators-stake-balance flex-start\">\n        <DelegatorsStakeBalanceSection\n            data={convertToString(selectedDelegator?.total_stake)}\n            isLoading={delegatorIsLoading}\n            text={t('main.stake')}\n        />\n         <DelegatorsStakeBalanceSection\n            data={convertToString(selectedDelegator?.cool_down_stake)}\n            isLoading={delegatorIsLoading}\n            text={t('delegators.cooldown')}\n        />\n        <DelegatorsStakeBalanceSection\n            data={convertToString(selectedDelegator?.non_stake)}\n            isLoading={delegatorIsLoading}\n            text={t('delegators.nonStakedBalance')}\n        />\n        <div className=\"delegators-stake-balance-to flex-column text-overflow\">\n            <h4>{t('delegators.delegatedTo')}</h4>\n            <LoadingComponent loaderType={LoaderType.TEXT} isLoading={delegatorIsLoading}>\n              {\n                  !delegatedTo ? \n                  <p className=\"delegators-stake-balance-big\">-</p>\n                  : <Link to ={routeToGuardian(selectedDelegator?.delegated_to)}>\n                  <h5 className=\"text-overflow\">{delegatedTo}</h5>\n                  </Link>\n              }\n            </LoadingComponent>\n            <LoadingComponent loaderType={LoaderType.TEXT} isLoading={delegatorIsLoading}>\n               <Link to ={routeToGuardian(selectedDelegator?.delegated_to)} >\n               <p className=\"text-overflow delegators-stake-balance-small\"> {selectedDelegator?.delegated_to}</p>\n               </Link>\n            </LoadingComponent>\n        </div>\n    </section>\n    )\n}\n\n","import React from 'react';\nimport { DelegatorStakeChart } from './components/delegator-stake-chart/delegator-stake-chart';\nimport { DelegatorsStakeBalance } from './components/delegators-stake-balance/delegators-stake-balance';\n\nimport './delegators-stake.scss';\n\n\nexport const DelegatorsStake = () => {\n    return (\n        <div className=\"delegators-stake\">\n            <DelegatorsStakeBalance />\n            <DelegatorStakeChart />\n        </div>\n    );\n};\n","import React from 'react'\n\nexport const DelegatorsReward = () =>  {\n    return (\n        <div>\n            reward\n        </div>\n    )\n}\n\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { RouteParams } from '../../../../global/types';\nimport { findDelegatorAction } from '../../../../redux/actions/actions';\nimport { AppState } from '../../../../redux/types/types';\nimport { routes } from '../../../../routes/routes';\nimport { checkIfLoadDeligator } from '../../../../utils/delegators';\nimport { useClickOutside } from 'react-click-outside-hook';\nimport LoupeImg from '../../../../assets/images/loupe.svg';\n\nexport const DelegatorSearch = () => {\n    const { selectedDelegator, delegatorNotFound } = useSelector((state: AppState) => state.delegator);\n    const [ref, hasClickedOutside] = useClickOutside();\n    const [inputValue, setInputValue] = useState<string>('');\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const params: RouteParams = useParams();\n    const { t } = useTranslation();\n\n    const pushAddressAndFindDelegator = (address: string) => {\n        const { section } = params;\n        history.push(routes.delegators.main.replace(':section?', section).replace(':address', address));\n        findDelegator(address);\n    };\n    useEffect(() => {\n        const { address } = params;\n        if (hasClickedOutside) {\n            if (!address) return;\n            setInputValue(address);\n        }\n    }, [hasClickedOutside]);\n\n    useEffect(() => {\n        const { address } = params;\n        if (!address || inputValue) return;\n        setInputValue(address);\n    }, [params.address]);\n\n    const findDelegator = (address: string) => {\n        const LoadDelegator = checkIfLoadDeligator(address, selectedDelegator);\n        if (LoadDelegator) {\n            dispatch(findDelegatorAction(address));\n        }\n    };\n\n    useEffect(() => {\n        const { address } = params;\n        if (!address) return;\n        findDelegator(address);\n    }, []);\n\n    const handlePaste = (e: React.ClipboardEvent<HTMLInputElement>) => {\n        const value = e.clipboardData.getData('Text');\n        pushAddressAndFindDelegator(value);\n    };\n\n    const submit = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (!inputValue) return;\n        if (e.key === 'Enter' || e.keyCode === 13) {\n            pushAddressAndFindDelegator(inputValue);\n        }\n    };\n\n    return (\n        <div className=\"delegator-search search-input flex-column\">\n            <p className=\"search-input-title\">{t('main.address')}</p>\n            <section className=\"search-input-box\" ref={ref}>\n                <button\n                    type=\"button\"\n                    className=\"search-input-box-btn flex-center\"\n                    onClick={() => pushAddressAndFindDelegator(inputValue)}>\n                    <img src={LoupeImg} alt=\"\" />\n                </button>\n                <input\n                    onKeyUp={(e: React.KeyboardEvent<HTMLInputElement>) => submit(e)}\n                    type=\"text\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => setInputValue(e.target.value)}\n                    value={inputValue}\n                    onPaste={(e: React.ClipboardEvent<HTMLInputElement>) => handlePaste(e)}\n                    placeholder = {t('delegators.inputPlaceholder')}\n                />\n            </section>\n            {delegatorNotFound && <p className=\"search-input-not-found\">{t('delegators.notFound')}</p>}\n        </div>\n    );\n};\n","import React, { FunctionComponent as Component, useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { DelegatorsSections, GuardiansSections, OverviewSections } from '../../global/enums';\nimport { MenuOption, RouteParams } from '../../global/types';\nimport './section-menu.scss';\n\ninterface Key {\n    key: DelegatorsSections | GuardiansSections | OverviewSections;\n}\n\ninterface Props {\n    selected: string | null;\n    disabled?: boolean;\n    key: DelegatorsSections | GuardiansSections | OverviewSections;\n}\n\nconst generateClassName = ({key, selected, disabled}: Props): string => {\n    let className = `flex-center section-menu-element`;\n    const isSelected = key.toLocaleLowerCase() === selected;\n    if (isSelected) {\n        className = `${className} section-menu-element-selected`;\n    }\n    if (disabled) {\n        className = `${className} section-menu-element-disabled`;\n    }\n    return className;\n};\n\ninterface StateProps {\n    options: MenuOption[];\n}\n\nexport const SectionMenu: Component<StateProps> = ({ options }: StateProps) => {\n    const [selected, setSelected] = useState<string | null>(null);\n    const params: RouteParams = useParams();\n    useEffect(() => {\n        const newSelected = params.section;\n        setSelected(newSelected);\n    }, [window.location.pathname]);\n\n    return (\n        <ul className=\"section-menu flex-start\">\n            {options.map((option: MenuOption, index: number) => {\n                const { route, key, name, disabled } = option;\n\n                return (\n                    <li key={index} className={generateClassName({key, selected, disabled})}>\n                        <Link to={route} className=\"flex-center\">\n                            <p className=\"capitalize\"> {name}</p>\n                        </Link>\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useSelector } from \"react-redux\";\nimport { SectionMenu } from \"../../../../components/section-menu/section-menu\";\nimport { AppState } from \"../../../../redux/types/types\";\nimport { generateDelegatorsRoutes } from \"../../../../utils/delegators\";\n\nexport const DelegatorSectionSelector = () => {\n    const { t } = useTranslation();\n        const { selectedDelegator } = useSelector((state: AppState) => state.delegator);\n    return <SectionMenu options={generateDelegatorsRoutes(t, selectedDelegator)} />\n}","import React from 'react';\nimport { routes } from '../../routes/routes';\nimport { Route} from 'react-router-dom';\nimport { DeligatorsActions } from './sections/delegators-actions/deligators-actions';\nimport { DelegatorsStake } from './sections/delegators-stake/delegators-stake';\nimport { DelegatorsReward } from './sections/delegators-reward/delegators-reward';\nimport './delegators.scss';\nimport { DelegatorSearch } from './components/delegator-search/delegator-search';\nimport { DelegatorSectionSelector } from './components/delegator-sections-selector/delegator-section-selector';\n\n const DelegatorsComponent = () => {\n    return (\n        <div className=\"delegators screen\">\n          <DelegatorSearch />\n            <div className=\"screen-section\">\n                <DelegatorSectionSelector />\n                <div className=\"screen-section-container\">\n                    <Route path={routes.delegators.stake} render={() => <DelegatorsStake />} />\n                    <Route path={routes.delegators.rewards} render={() => <DelegatorsReward />} />\n                    <Route path={routes.delegators.actions} render={() => <DeligatorsActions />} />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport const Delegators = React.memo(DelegatorsComponent)","import { TFunction } from 'i18next';\nimport { routes } from '../routes/routes';\nimport deligatorsIcon from '../assets/images/overview-icon.svg';\nimport overviewIcon from '../assets/images/guardians-icon.svg';\nimport guardiansIcon from '../assets/images/deligators-icon.svg';\nimport { NavigationLink } from '../global/types';\nimport { Delegator, GuardianInfo } from '@orbs-network/pos-analytics-lib';\n\nconst getAddress = (obj?: Delegator | GuardianInfo) => {\n    if (!obj) return '';\n    const { address } = obj;\n    if (!address) return '';\n    return address;\n};\n\nexport const generateNavigationLinks = (\n    t: TFunction,\n    delegator?: Delegator,\n    guardian?: GuardianInfo\n): NavigationLink[] => {\n    return [\n        {\n            name: t('navigation.overview'),\n            route: routes.overview.stake,\n            image: overviewIcon\n        },\n        {\n            name: t('navigation.guardians'),\n            route: routes.guardians.stake.replace(':address', getAddress(guardian)),\n            image: guardiansIcon\n        },\n        {\n            name: t('navigation.delegators'),\n            route: routes.delegators.stake.replace(':address', getAddress(delegator)),\n            image: deligatorsIcon\n        }\n    ];\n};\n","import React, { FunctionComponent as Component } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link, withRouter } from 'react-router-dom';\nimport { generateNavigationLinks } from '../../utils/navigation';\nimport Logo from '../../assets/images/navbar-logo.svg';\nimport { NavigationLink } from '../../global/types';\nimport { useSelector } from 'react-redux';\nimport { AppState } from '../../redux/types/types';\n\nimport './navigation-menu.scss';\n\nexport const NavigationMenu: Component<any> = () => {\n    const { t } = useTranslation();\n    const {selectedDelegator} = useSelector((state: AppState) => state.delegator);\n    const {selectedGuardian} = useSelector((state: AppState) => state.guardians);\n    return (\n        <nav className=\"navigation flex-column\">\n            <img src={Logo} alt=\"\" className=\"navigation-logo\" />\n            <h4 className=\"navigation-title\">{t('navigation.orbsUniverse')}</h4>\n            <h5 className=\"navigation-sub-title\">{t('navigation.analytics')}</h5>\n            <ul className=\"navigation-list flex-column\">\n                {generateNavigationLinks(t, selectedDelegator, selectedGuardian).map((link: NavigationLink, index: number) => {\n                    const { name, image, route } = link;\n                    return (\n                       <li className='navigation-list-item'  key = {index}>\n                            <Link to={route} className='navigation-list-item-link flex-column'>\n                                <img src={image} alt=\"\" />\n                                <p className='capitalize'>{name}</p>\n                            </Link>\n                       </li>\n                    );\n                })}\n            </ul>\n        </nav>\n    );\n};\n\n\n","import React from 'react';\nimport { routes } from '../../../../../../routes/routes';\nimport { convertToString } from '../../../../../../utils/number';\nimport { Link } from 'react-router-dom';\nimport CopyImg from '../../../../../../assets/images/copy.svg';\nimport { GuardianDelegator } from '@orbs-network/pos-analytics-lib';\n\ninterface StateProps {\n    delegator: GuardianDelegator;\n}\n\nexport const GuardianDelegatorElement = ({ delegator }: StateProps) => {\n    const { address, stake, non_stake } = delegator;\n    return (\n        <li className=\"flex-start-center\">\n            <Link\n                className=\"list-item text-overflow flex-start-center\"\n                to={routes.delegators.stake.replace(':address', address)}>\n                <p>{address}</p>\n                <img src={CopyImg} alt=\"\" />\n            </Link>\n            <p className=\"list-item\">{convertToString(stake)}</p>\n            <p className=\"list-item\">{convertToString(non_stake)}</p>\n        </li>\n    );\n};\n","import React from 'react';\nimport { GuardianDelegator } from '@orbs-network/pos-analytics-lib';\nimport { useSelector } from 'react-redux';\nimport { AppState } from '../../../../redux/types/types';\nimport { LoadingComponent } from '../../../../components/loading-component/loading-component';\nimport { LoaderType } from '../../../../global/enums';\nimport { NoData } from '../../../../components/no-data/no-data';\nimport './guardian-delegators.scss';\nimport { GuardianDelegatorElement } from './components/guardian-delegator/guardian-delegator';\n\nexport const GuardianDelegators = () => {\n    const { selectedGuardian, guardianIsLoading } = useSelector((state: AppState) => state.guardians);\n\n    const titles = ['Delegator\\'s address', 'Stake', 'Non-staked balance'];\n    return (\n        <div className=\"list guardian-delegators-list\">\n          {selectedGuardian &&   <header className=\"list-header flex-start-center\">\n                {titles.map((title: any, index: number) => {\n                    return (\n                        <h3 key={index} className=\"list-item\">\n                            {title}\n                        </h3>\n                    );\n                })}\n            </header>}\n           <LoadingComponent isLoading = {guardianIsLoading} loaderType = {LoaderType.LIST} listElementAmount={3}>\n           <ul>\n                {selectedGuardian ?\n                    selectedGuardian.delegators.map((delegator: GuardianDelegator) => {\n                        return <GuardianDelegatorElement  key = {delegator.address} delegator = {delegator} />\n                    }) : <NoData />}\n            </ul>\n           </LoadingComponent>\n        </div>\n    );\n};\n","import React from 'react'\nimport { Line } from 'react-chartjs-2';\nimport { useTranslation } from 'react-i18next';\nimport { ChartData } from '../../../../../../global/types';\nimport { generateDatasets, getGuardiansLineChartSettings } from '../../../../../../utils/chart';\n\n\ninterface StateProps {\n    chartData: ChartData;\n}\n \nexport const Chart = ({ chartData }: StateProps) => {\n    const {t} = useTranslation()\n    const data = {\n        datasets: generateDatasets(chartData)\n    };\n    const options = getGuardiansLineChartSettings(chartData.unit, t);\n    return (options ? <div className='line-chart'> <Line data={data} options={options} /></div> : null);\n};\n","import React, { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TimeRangeSelector } from '../../../../../../components/date-format-picker/time-range-selector';\nimport { LoadingComponent } from '../../../../../../components/loading-component/loading-component';\nimport { NoData } from '../../../../../../components/no-data/no-data';\nimport { ChartUnit, LoaderType } from '../../../../../../global/enums';\nimport { setGuardianChartData } from '../../../../../../redux/actions/actions';\nimport { AppState } from '../../../../../../redux/types/types';\nimport { generateGuardiansChartData } from '../../../../../../utils/guardians';\nimport { Chart } from './chart';\nimport './guardian-stake-chart.scss';\n\n\nexport const GuardianStakeChart = () => {\n    const dispatch = useDispatch();\n    const { selectedGuardian, guardianIsLoading, guardianChartData } = useSelector(\n        (state: AppState) => state.guardians\n    );\n    const { t } = useTranslation();\n    useEffect(() => {\n        if (guardianChartData) return;\n        selectChartData(ChartUnit.MONTH);\n    }, [selectedGuardian && selectedGuardian.address]);\n\n    const selectChartData = (unit: ChartUnit) => {\n        const data = generateGuardiansChartData(unit, selectedGuardian);\n        dispatch(setGuardianChartData(data));\n    };\n    return (\n        <div className=\"guardian-stake-chart\">\n            <LoadingComponent loaderType={LoaderType.BIG} isLoading={guardianIsLoading}>\n                {guardianChartData ? (\n                    <>\n                        <header className=\"flex-between\">\n                            <h4>{t('delegators.stakeChangeOverTime')}</h4>\n                            <TimeRangeSelector selected={guardianChartData.unit} selectCallBack={selectChartData} />\n                        </header>\n                        <Chart chartData={guardianChartData}  />\n                    </>\n                ) : (\n                    null\n                )}\n            </LoadingComponent>\n            {!selectedGuardian && !guardianIsLoading && <NoData />}\n        </div>\n    );\n};\n","import React from 'react'\nimport { useTranslation } from 'react-i18next';\nimport { ChartColors } from '../../../../../../global/enums';\n\n\n\ninterface Legend {\n    name: string;\n    background: ChartColors;\n}\n\nexport const GuardianStakeLegend = () => {\n    const {t} = useTranslation()\n    const legends = [\n        {\n            name: t('guardians.totalDelegation'),\n            background: ChartColors.YELLOW\n        },\n        {\n            name: t('guardians.ownDelegation'),\n            background: ChartColors.GRAY\n        },\n        {\n            name: `# ${t('guardians.delegators')}`,\n            background: ChartColors.GREEN\n        }\n    ];\n\n    return (\n        <section className=\"guardian-stake-legend\">\n                <h4 className='capitalize'>{t('guardians.legend')}</h4>\n                {legends.map((legend: Legend) => {\n                    const { name, background } = legend;\n                    return (\n                        <div key = {name} className='flex-start-center'>\n                            <figure\n                                style={{\n                                    background\n                                }}></figure>\n                            <p className='capitalize'>{name}</p>\n                        </div>\n                    );\n                })}\n            </section>\n    )\n}\n\n","import React from 'react';\nimport { GuardianStakeChart } from './components/guardian-stake-chart/guardian-stake-chart';\nimport { GuardianStakeLegend } from './components/guardian-stake-legend/guardian-stake-legend';\nimport './guardians-stake.scss';\n\nexport const GuardiansStake = () => {\n\n    return (\n        <div className=\"guardian-stake flex-start\">\n            <GuardianStakeChart />\n            <GuardianStakeLegend />\n        </div>\n    );\n};\n","import { Guardian } from '@orbs-network/pos-analytics-lib';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { useClickOutside } from 'react-click-outside-hook';\nimport { RouteParams } from '../../../../global/types';\nimport { getGuardianAction } from '../../../../redux/actions/actions';\nimport { AppState } from '../../../../redux/types/types';\nimport { routes } from '../../../../routes/routes';\nimport { checkIfLoadDelegator, filterGuardians, getGuardianByAddress } from '../../../../utils/guardians';\nimport LoupeImg from '../../../../assets/images/loupe.svg';\n\n\nexport const GuardianSearch = () => {\n    const { guardians, selectedGuardian } = useSelector((state: AppState) => state.guardians);\n    const dispatch = useDispatch();\n    const history: any = useHistory();\n    const { t } = useTranslation();\n    const [ref, hasClickedOutside] = useClickOutside();\n    const [inputValue, setInputValue] = useState<string>('');\n    const [showResults, setShowResults] = useState<boolean>(false);\n    const params: RouteParams = useParams();\n    useEffect(() => {\n        findGuardianOnLoad();\n    }, []);\n\n    const findGuardianOnLoad = () => {\n        const { address } = params;\n        if (!address) return;\n        findGuardian(address);\n    };\n\n    const findGuardian = (address: string) => {\n        const loadGuardian = checkIfLoadDelegator(address, selectedGuardian);\n        if (loadGuardian) {\n            dispatch(getGuardianAction(address));\n        }\n    };\n    const searchByAddress = (address: string) => {\n        const { section } = params;\n        history.push(routes.guardians.main.replace(':section?', section).replace(':address', address));\n        findGuardian(address);\n    };\n    useEffect(() => {\n        const { address } = params;\n        if (hasClickedOutside) {\n            setShowResults(false);\n            setGuardianNameAsValue(address)\n        }\n    }, [hasClickedOutside]);\n\n\n\n    const setGuardianNameAsValue = (address?: string) => {\n        if(!address) return \n        const guardian = getGuardianByAddress(guardians, address)\n        if(!guardian) return\n        const string = `${guardian.name} (${guardian.address})`\n        setInputValue(string);\n    }\n\n    useEffect(() => {\n        const { address } = params;\n        setGuardianNameAsValue(address)\n    }, [ guardians && guardians.length]);\n\n    const handlePaste = (e: React.ClipboardEvent<HTMLInputElement>) => {\n        const value = e.clipboardData.getData('Text');\n        searchByAddress(value);\n    };\n\n    const submit = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (!inputValue) return;\n        if (e.key === 'Enter' || e.keyCode === 13) {\n            searchByAddress(inputValue);\n        }\n    };\n    const select = (guardian: Guardian) => {\n        const { address } = guardian;\n        setGuardianNameAsValue(address)\n        setShowResults(false);\n        searchByAddress(address);\n    };\n  \n    return (\n        <div className=\"guardian search-input flex-column\">\n            <p className=\"search-input-title\">{t('guardians.selectGuardian')}</p>\n            <section className=\"search-input-box\" ref={ref}>\n                <button\n                    type=\"button\"\n                    className=\"search-input-box-btn flex-center\"\n                    onClick={() => searchByAddress(inputValue)}>\n                    <img src={LoupeImg} alt=\"\" />\n                </button>\n                <input\n                    onKeyUp={(e: React.KeyboardEvent<HTMLInputElement>) => submit(e)}\n                    type=\"text\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => setInputValue(e.target.value)}\n                    value={inputValue}\n                    onFocus={() => setShowResults(true)}\n                    onPaste={(e: React.ClipboardEvent<HTMLInputElement>) => handlePaste(e)}\n                    placeholder = {t('guardians.inputPlaceholder')}\n                />\n                {showResults && (\n                    <ul className=\"search-input-box-results\">\n                        {filterGuardians(guardians || [], inputValue).map((result: Guardian, index: number) => {\n                            const { address, name } = result;\n                            return (\n                                <li key={index} className=\"flex-start-center\" onClick={() => select(result)}>\n                                    <p className=\"text-overflow\">{`${name} (${address})`}</p>\n                                </li>\n                            );\n                        })}\n                    </ul>\n                )}\n            </section>\n        </div>\n    );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport { SectionMenu } from '../../../../components/section-menu/section-menu';\nimport { AppState } from '../../../../redux/types/types';\nimport { generateGuardiansRoutes } from '../../../../utils/guardians';\n\nexport const GuardianSectionSelect = () => {\n    const { selectedGuardian } = useSelector((state: AppState) => state.guardians);\n\n    const { t } = useTranslation();\n    return (\n        <SectionMenu options={generateGuardiansRoutes(t, selectedGuardian)} />\n    );\n};\n","import React  from 'react';\nimport { Route } from 'react-router-dom';\nimport { routes } from '../../routes/routes';\nimport { GuardianDelegators } from './sections/guardian-delegators/guardian-delegators';\nimport { GuardiansStake } from './sections/guardians-stake/guardians-stake';\nimport { GuardianSearch } from './components/guardian-search/guardian-search';\nimport { GuardianSectionSelect } from './components/guardian-section-select/guardian-section-select';\nimport './guardians.scss';\n\nconst GuardiansComponent = () => {\n  \n    return (\n        <div className=\"guardians screen\">\n           <GuardianSearch />\n            <div className=\"screen-section\">\n             <GuardianSectionSelect />\n                <div className=\"screen-section-container\">\n                    <Route path={routes.guardians.stake} render={() => <GuardiansStake />} />\n                    <Route path={routes.guardians.delegators} render={() => <GuardianDelegators />} />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport const Guardians = React.memo(GuardiansComponent)","export const overviewguardiansColors = [\n    '#00A7EA',\n    '#74DABF',\n    '#FF8FC8',\n    '#FF4463',\n    '#FFBD51',\n    '#74737A',\n    '#00D48C',\n    '#CF4E81',\n    '#FFEC2A',\n    '#B9770B',\n    '#00187C',\n    '#FBCBFF'\n];\n","import { Guardian, PosOverview, PosOverviewData, PosOverviewSlice } from '@orbs-network/pos-analytics-lib';\nimport { TFunction } from 'i18next';\nimport { ChartUnit, OverviewSections } from '../global/enums';\nimport { ChartDatasetObject, MenuOption } from '../global/types';\nimport { routes } from '../routes/routes';\nimport moment from 'moment';\nimport { converFromNumberToDate, generateDays, generateMonths, generateWeeks, returnDateNumber } from './dates';\nimport { sortByDate, sortByNumber } from './array';\nimport { overviewguardiansColors } from '../ui/colors';\nimport { api } from '../services/api';\nimport { DATE_FORMAT, STACK_GRAPH_MONTHS_LIMIT } from '../global/variables';\nexport const getGuardiantsAndCandidates = (guardians: Guardian[]) => {\n    console.log(guardians);\n};\n\nexport const generateOverviewRoutes = (t: TFunction): MenuOption[] => {\n    return [\n        {\n            name: t('main.stake'),\n            route: routes.overview.stake,\n            key: OverviewSections.STAKE\n        },\n        {\n            name: t('main.weights'),\n            route: routes.overview.weights,\n            key: OverviewSections.WEIGHTS\n        }\n    ];\n};\n\nexport const getGuardianColor = (amount: number) => {\n    let arr: string[] = [];\n    let count = 0;\n    const limit = overviewguardiansColors.length - 1;\n    for (let i = 0; i < amount; i++) {\n        const color = overviewguardiansColors[count];\n        arr.push(color);\n        if (count === limit) {\n            count = 0;\n        } else {\n            count += 1;\n        }\n    }\n    return arr;\n};\n\nconst getSortedGuardiansOrder = (slices: PosOverviewSlice[]) => {\n    const sorted = sortByDate(slices);\n    const latest: PosOverviewSlice = sorted[0];\n    const { data } = latest;\n    const sortedGuardians = sortByNumber(data, 'effectiveStake');\n    const guardiansObject: any = {};\n    sortedGuardians.forEach((guardian: Guardian, index: number) => {\n        const obj: any = {\n            order: index\n        };\n        guardiansObject[guardian.address] = obj;\n    });\n    return guardiansObject;\n};\n\nconst orderArr = (data: PosOverviewData[], orderObject: any) => {\n    return data.sort((a: PosOverviewData, b: PosOverviewData) => {\n        return orderObject[a.address] - orderObject[b.address];\n    });\n};\n\nexport const getOverviewChartData = (dates: any, unit: ChartUnit, overviewData: PosOverview) => {\n    const { slices } = overviewData;\n    const order = getSortedGuardiansOrder(slices);\n    const datesInUse: any = [];\n    slices.forEach((slice: PosOverviewSlice) => {\n        const { block_time, data } = slice;\n        const date = returnDateNumber(block_time, unit);\n        if (!date) return;\n        if (!dates.hasOwnProperty(date)) return;\n        if (datesInUse.includes(date)) return;\n        datesInUse.push(date);\n        dates[date] = orderArr(data, order);\n    });\n    const filled = checkIfEmptyDate(dates, unit);\n    return {\n        data: filled,\n        unit\n    };\n};\n\nexport const checkIfEmptyDate = (dates: any, unit: ChartUnit) => {\n    let previousData: any = [];\n    const data = Object.keys(dates).map(function (key, index) {\n        const data = dates[key];\n        const date = converFromNumberToDate(Number(key), unit, DATE_FORMAT);\n        if (data.length === 0) {\n            return {\n                date,\n                data: previousData\n            };\n        } else {\n            previousData = data;\n            return {\n                date,\n                data: dates[key]\n            };\n        }\n    });\n    return data;\n};\n\nexport const generateOverviewChartData = (type: ChartUnit, overviewData?: PosOverview) => {\n    if (!overviewData) return;\n    let data;\n    switch (type) {\n        case ChartUnit.MONTH:\n            const months = generateMonths(STACK_GRAPH_MONTHS_LIMIT);\n            data = getOverviewChartData(months, ChartUnit.MONTH, overviewData);\n            break;\n        case ChartUnit.WEEK:\n            const weeks = generateWeeks(STACK_GRAPH_MONTHS_LIMIT);\n            data = getOverviewChartData(weeks, ChartUnit.WEEK, overviewData);\n            break;\n        case ChartUnit.DAY:\n            const days = generateDays(STACK_GRAPH_MONTHS_LIMIT);\n            data = getOverviewChartData(days, ChartUnit.DAY, overviewData);\n            break;\n        default:\n            break;\n    }\n    return data;\n};\n","import React from 'react'\nimport { useTranslation } from 'react-i18next';\nimport { SectionMenu } from '../../../../components/section-menu/section-menu';\nimport { generateOverviewRoutes } from '../../../../utils/overview';\n\nexport const OverviewSectionSelector = () => {\n    const { t } = useTranslation();\n    return <SectionMenu options={generateOverviewRoutes(t,)} />\n\n}\n\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppState } from '../../../../redux/types/types';\nimport { convertToString } from '../../../../utils/number';\nimport TotalStakeImg from '../../../../assets/images/cpu.svg';\nimport GuardiansImg from '../../../../assets/images/encrypted.svg';\nimport ApyImg from '../../../../assets/images/stellar.svg';\nimport { useTranslation } from 'react-i18next';\nimport { LoadingComponent } from '../../../../components/loading-component/loading-component';\nimport { ChartUnit, LoaderType } from '../../../../global/enums';\nimport { getOverviewAction } from '../../../../redux/actions/actions';\nimport './overview-top.scss';\nimport { getOverviewChartData } from '../../../../utils/overview';\nimport { generateMonths } from '../../../../utils/dates';\nimport { STACK_GRAPH_MONTHS_LIMIT } from '../../../../global/variables';\n\ninterface StateProps {\n    data: number;\n    textTop: string;\n    textBottom: string;\n    imgSrc: string;\n    btnText: string;\n    link?: string;\n}\n\nconst OverviewTopSection = ({ data, textTop, textBottom, imgSrc, btnText, link }: StateProps) => {\n    return (\n        <section className=\"overview-top-section flex-column\">\n            <div className=\"flex-between\">\n                <span className=\"flex-start-center\">\n                    <img src={imgSrc} alt=\"\" />\n                    <span className='flex-column'>\n                        <p>{textTop}</p>\n                        <p>{textBottom}</p>\n                    </span>\n                </span>\n                <LoadingComponent loaderType = {LoaderType.TEXT} isLoading ={!data}>\n                <h4>{convertToString(data)}</h4>\n                </LoadingComponent>\n            </div>\n        <button type='button' className='flex-center'>\n    {link ?  <a className='flex-center' href={link} target='_blank'>{btnText}</a> : btnText}\n        </button>\n        </section>\n    );\n};\n\n\n\n\nconst OverviewTopComponent = () => {\n    const { overviewData } = useSelector((state: AppState) => state.overview);\n    const { t } = useTranslation();\n    const dispatch = useDispatch()\n    return (\n        <div className=\"overview-top flex-start-center\">\n            <OverviewTopSection\n                textTop={t('overview.total')}\n                textBottom={t('overview.stake')}\n                data={overviewData?.total_stake || 0}\n                imgSrc={TotalStakeImg}\n                btnText = {t('overview.stakeYourTokens')}\n                link = 'https://staking.orbs.network'\n            />\n            <OverviewTopSection\n                textTop={t('overview.guardians')}\n                textBottom={t('overview.candidates')}\n                data={overviewData ? overviewData.n_candidates + overviewData.n_guardians : 0}\n                imgSrc={GuardiansImg}\n                btnText = {t('overview.guardianList')}\n                link = 'https://staking.orbs.network'\n            />\n        </div>\n    );\n};\nexport const OverviewTop = React.memo(OverviewTopComponent)","import React from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { getGuardianColor } from '../../utils/overview';\nimport { Guardian } from '@orbs-network/pos-analytics-lib';\nimport { formatNumber } from '../../utils/number';\n\ninterface StateProps {\n    chartData: any;\n}\n\nexport const BarChartComponent = ({ chartData }: StateProps) => {\n    const createDataset = (backgroundColor: string, label: string) => {\n        return {\n            backgroundColor,\n            label,\n            data: [],\n            maxBarThickness: 30\n        };\n    };\n\n    const addToDataset = (data: any, datasets: any, colors: any, date: any, index: number) => {\n        data.forEach((guardian: Guardian, i: number) => {\n            const { address, effectiveStake } = guardian;\n            if (!datasets[address]) {\n                datasets[address] = createDataset(colors[i], `${index + i}`);\n            }\n            const obj = {\n                x: date,\n                y: effectiveStake\n            };\n            datasets[address].data.push(obj);\n        });\n        return datasets;\n    };\n\n    const generateDataset = (arr: any) => {\n        if (!arr) return;\n        const colors = getGuardianColor(21);\n        let datasets: any = {};\n        arr.data.forEach((elem: any, index: number) => {\n            const { data, date } = elem;\n            datasets = addToDataset(data, datasets, colors, date, index);\n        });\n        const result = Object.keys(datasets).map((key) => datasets[key]);\n        return result;\n    };\n\n    var barChartData = {\n        datasets: generateDataset(chartData)\n    };\n\n    const options = {\n        maintainAspectRatio: false,\n        responsive: true,\n        elements: {\n            line: {\n                tension: 0\n            }\n        },\n        legend: {\n            display: false\n        },\n        title: {\n            display: false\n        },\n        animation: {\n            duration: 0\n        },\n      \n        interaction: {\n            mode: 'index'\n        },\n        tooltips: {\n            mode: 'index',\n            intersect: false,\n            enabled: false\n        },\n        scales: {\n            xAxes: [\n                {\n                    offset: true,\n                    type: 'time',\n                    time: {\n                        unit:chartData.unit,\n                        format: 'DD/MM/YYYY'\n                    },\n                    stacked: true,\n                    gridLines: {\n                        display: false,\n                        drawBorder: false\n                    },\n                    ticks: {\n                        padding: 10,\n                        fontSize: 12,\n                        fontFamily: 'Montserrat',\n                        fontColor: '#666666'\n                    }\n                }\n            ],\n            yAxes: [\n                \n                {\n                    gridLines: {\n                        display: true,\n                        color: 'rgba(255,99,132,0.2)',\n                        borderDash: [5],\n                        zeroLineBorderDash: [5],\n                        zeroLineColor: 'rgba(255,99,132,0.2)',\n                        drawBorder: false\n                    },\n                    stacked: true,\n                    ticks: {\n                        maxTicksLimit: 7,\n                        fontSize: 12,\n                        fontFamily: 'Montserrat',\n                        fontColor: '#666666',\n                        callback: function (value: number) {\n                            return formatNumber(value, '0.0a').toUpperCase();\n                        },\n                        padding: 15\n                    }\n                }\n            ]\n        }\n    };\n\n    return <Bar data={barChartData} options={options} />;\n};\n","import React, { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { BarChartComponent } from '../../../../../../components/bar-chart/bar-chart';\nimport { TimeRangeSelector } from '../../../../../../components/date-format-picker/time-range-selector';\nimport { LoadingComponent } from '../../../../../../components/loading-component/loading-component';\nimport { ChartUnit, LoaderType } from '../../../../../../global/enums';\nimport { STACK_GRAPH_MONTHS_LIMIT } from '../../../../../../global/variables';\nimport { setOverviewChartData } from '../../../../../../redux/actions/actions';\nimport { AppState } from '../../../../../../redux/types/types';\nimport { generateDays, generateMonths } from '../../../../../../utils/dates';\nimport { generateOverviewChartData, getOverviewChartData } from '../../../../../../utils/overview';\n\nimport './overview-stake-chart.scss';\nexport const OverviewStakeChart = () => {\n    const dispatch = useDispatch()\n    const { overviewData, overviewChartData, overviewDataLoding } = useSelector((state: AppState) => state.overview);\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        if(overviewChartData) return \n        selectChartData(ChartUnit.MONTH )\n    }, [overviewData])\n\n    const selectChartData = (unit: ChartUnit) => {\n        const data = generateOverviewChartData(unit, overviewData);\n        dispatch(setOverviewChartData(data));\n    };\n    return (\n        <div className=\"overview-stake-chart\">\n          <LoadingComponent isLoading = {overviewDataLoding} loaderType = {LoaderType.BIG}>\n          {overviewChartData &&  <header className=\"flex-between\">\n                <h4 className='capitalize'>{t('overview.graphText')}</h4>\n                <TimeRangeSelector selected={overviewChartData.unit} selectCallBack={selectChartData} />\n            </header>}\n           {overviewChartData && <div className='bar-chart'> <BarChartComponent chartData={overviewChartData} /></div>}\n          </LoadingComponent>\n        </div>\n    );\n};\n","import { Dispatch } from 'redux';\nimport { api } from '../../services/api';\nimport { types } from '../types/types';\n\nexport const getOverviewAction = () => async (dispatch: any) => {\n    const overview = await api.getOverviewApi();\n    if (!overview) return null;\n    return dispatch({\n        type: types.OVERVIEW.SET_OVERVIEW,\n        payload: overview\n    });\n};\n\nexport const setOverviewChartData = (data: any) => async (dispatch: Dispatch) => {\n    return dispatch({\n        type: types.OVERVIEW.SET_CHART_DATA,\n        payload: data\n    });\n};\n","import React from 'react'\nimport { useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { AppState } from '../../../../../../redux/types/types';\nimport { routes } from '../../../../../../routes/routes';\nimport { getGuardianColor } from '../../../../../../utils/overview';\nimport CopyImg from '../../../../../../assets/images/copy.svg';\nimport { LoadingComponent } from '../../../../../../components/loading-component/loading-component';\nimport { LoaderType } from '../../../../../../global/enums';\n\n\nimport './overview-stake-guardians.scss';\n\nexport const OverviewStakeGuadians = () =>  {\n    const { overviewData } = useSelector((state: AppState) => state.overview);\n\n    return (\n        <div className=\"overview-stake-guardians\">\n        <header className=\"flex-start\">Guardian list</header>\n       <LoadingComponent isLoading = {!overviewData} loaderType = {LoaderType.LIST} listElementAmount={6}>\n       <ul className=\"overview-stake-guardians-list\">\n            {overviewData &&\n                overviewData.slices &&\n                overviewData.slices[0].data.map((guardian: any, index: number) => {\n                    const colors = getGuardianColor(overviewData.slices[0].data.length);\n                    const background = colors[index];\n                    return (\n                        <li key={index}>\n                            <Link\n                                to={routes.guardians.stake.replace(':address', guardian.address)}\n                                className=\"flex-start-center\">\n                                <figure\n                                    style={{\n                                        background\n                                    }}></figure>\n                                <p className=\"text-overflow\">{guardian.name}</p>\n                                <img src={CopyImg} alt=\"\" />\n                            </Link>\n                        </li>\n                    );\n                })}\n        </ul>\n       </LoadingComponent>\n    </div>\n    )\n}\n\n","import React from 'react';\n\nimport './overview-stake.scss';\nimport { OverviewStakeChart } from './components/overview-stake-chart/overview-stake-chart';\nimport { OverviewStakeGuadians } from './components/overview-stake-guardians/overview-stake-guardians';\nexport const OverviewStake = () => {\n    return (\n        <div className=\"overview-stake flex-between\">\n            <OverviewStakeChart />\n           <OverviewStakeGuadians />\n        </div>\n    );\n};\n","import React, { useEffect } from 'react'\nimport { useDispatch } from 'react-redux';\nimport { Route } from 'react-router-dom';\nimport { getOverviewAction } from '../../redux/actions/actions';\nimport { routes } from '../../routes/routes';\nimport { OverviewSectionSelector } from './components/overview-section-selector/overview-section-selector';\nimport { OverviewTop } from './components/overview-top/overview-top';\nimport './overview.scss';\nimport { OverviewStake } from './sections/overview-stake/overview-stake';\n\n export const Overview = () =>  {\n    return (\n        <div className='overview screen'>\n                <OverviewTop />\n                <div className=\"screen-section\">\n                <OverviewSectionSelector />\n                <div className=\"screen-section-container\">\n                    <Route path={routes.overview.stake} render={() => <OverviewStake />} />\n                </div>\n            </div>\n        </div>\n    )\n}\n","import { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport React, { FunctionComponent as Component } from 'react';\n\nimport { routes } from './routes';\nimport { Delegators } from '../screens/deligators/delegators';\nimport { NavigationMenu } from '../components/navigation-menu/navigation-menu';\nimport { Guardians } from '../screens/guardians/guardians';\nimport { Overview } from '../screens/overview/overview';\n\nexport const RootRouter: Component = () => {\n    return (\n        <Router basename={process.env.PUBLIC_URL}>\n            <NavigationMenu />\n            <Switch>\n                <Route exact path=\"/\">\n                    <Redirect to={routes.overview.stake} />\n                </Route>\n                <Route path={routes.overview.main} render={() => <Overview />} />\n                <Route path={routes.guardians.main} render={() => <Guardians />} />\n                <Route path={routes.delegators.main} render={() => <Delegators />} />\n            </Switch>\n        </Router>\n    );\n};\n","import React, { FunctionComponent as Component, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getGuardiansAction, getOverviewAction } from './redux/actions/actions';\nimport { RootRouter } from './routes';\nimport './scss/app.scss';\n\n\nconst App: Component = () => {\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(getGuardiansAction());\n        dispatch(getOverviewAction())\n    }, [])\n\n    return (\n        <div className='app flex-between'>\n            <RootRouter />\n        </div>\n    )\n};\n\nexport default App;\n","import { AuthState } from '../types/auth-types';\nimport { types } from '../types/types';\n\nconst initialState: AuthState = {\n    token: ''\n};\n\nexport const authReducer = (state = initialState, { payload, type }: any): AuthState => {\n    switch (type) {\n        case types.LOGIN:\n            return {\n                ...state\n            };\n        default:\n            return state;\n    }\n};\n","import { AuthState } from '../types/auth-types';\nimport { DelegatorState } from '../types/delegator-types';\nimport { types } from '../types/types';\n\nconst initialState: DelegatorState = {\n    selectedDelegator: undefined,\n    delegatorNotFound: false,\n    delegatorIsLoading: false,\n    delegatorChartData: undefined\n};\n\nexport const delegatorReducer = (state = initialState, { payload, type }: any): DelegatorState => {\n    switch (type) {\n        case types.DELEGATOR.SET_DELEGATOR:\n            return {\n                ...state,\n                selectedDelegator: payload\n            };\n        case types.DELEGATOR.DELEGATOR_LOADING:\n            return {\n                ...state,\n                delegatorIsLoading: payload\n            };\n        case types.DELEGATOR.CLEAR_DELEGATOR:\n            return {\n                ...state,\n                selectedDelegator: undefined\n            };\n        case types.DELEGATOR.DELEGATOR_NOT_FOUND:\n            return {\n                ...state,\n                delegatorNotFound: payload,\n                selectedDelegator: payload ? undefined : state.selectedDelegator\n            };\n        case types.DELEGATOR.SET_DELEGATOR_CHART_DATA:\n            return {\n                ...state,\n                delegatorChartData: payload\n            };\n        case types.DELEGATOR.RESET_DELEGATOR:\n            return {\n                ...state,\n                delegatorChartData: undefined,\n                selectedDelegator: undefined,\n                delegatorNotFound: false,\n                delegatorIsLoading: true\n            };\n        default:\n            return state;\n    }\n};\n","import { GuardiansState } from '../types/guardians-types';\nimport { types } from '../types/types';\n\nconst initialState: GuardiansState = {\n    selectedGuardian: undefined,\n    guardians: undefined,\n    guardianNotFound: false,\n    guardianIsLoading: false,\n    guardianChartData: undefined\n};\n\nexport const guardiansReducer = (state = initialState, { payload, type }: any): GuardiansState => {\n    switch (type) {\n        case types.GUARDIAN.SET_GUARDIAN:\n            return {\n                ...state,\n                selectedGuardian: payload\n            };\n        case types.GUARDIAN.SET_GUARDIANS:\n            return {\n                ...state,\n                guardians: payload\n            };\n        case types.GUARDIAN.GUARDIAN_NOT_FOUND:\n            return {\n                ...state,\n                guardianNotFound: payload\n            };\n        case types.GUARDIAN.GUARDIAN_LOADING:\n            return {\n                ...state,\n                guardianIsLoading: payload\n            };\n        case types.GUARDIAN.SET_GUARDIAN_CHART_DATA:\n            return {\n                ...state,\n                guardianChartData: payload\n            };\n        case types.GUARDIAN.RESET_GUARDIAN:\n            return {\n                ...state,\n                guardianChartData: undefined,\n                selectedGuardian: undefined,\n                guardianNotFound: false,\n                guardianIsLoading: true\n            };\n        default:\n            return state;\n    }\n};\n","import { OverviewState } from '../types/overview-types';\nimport { types } from '../types/types';\n\nconst initialState: OverviewState = {\n    overviewData: undefined,\n    overviewChartData: undefined,\n    overviewDataLoding: true\n};\n\nexport const overviewReducer = (state = initialState, { payload, type }: any): OverviewState => {\n    switch (type) {\n        case types.OVERVIEW.SET_OVERVIEW:\n            return {\n                ...state,\n                overviewData: payload,\n                overviewDataLoding: false\n            };\n        case types.OVERVIEW.SET_CHART_DATA:\n            return {\n                ...state,\n                overviewChartData: payload\n            };\n\n        default:\n            return state;\n    }\n};\n","import { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\nimport { authReducer } from './auth-reducer';\nimport { delegatorReducer } from './delegator';\nimport { guardiansReducer } from './guardians';\nimport { overviewReducer } from './overview';\n\nconst rootReducer = (history: any) =>\n    combineReducers({\n        router: connectRouter(history),\n        auth: authReducer,\n        delegator: delegatorReducer,\n        guardians: guardiansReducer,\n        overview: overviewReducer\n    });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware, compose } from 'redux';\n\nimport { routerMiddleware } from 'connected-react-router';\nimport reduxThunk from 'redux-thunk';\nimport { createBrowserHistory } from 'history';\n\nimport reducers from '../reducers/reducers';\nconst history = createBrowserHistory();\n\nconst store = createStore(reducers(history), {}, compose(applyMiddleware(routerMiddleware(history), reduxThunk)));\nexport default store;\n","import process from 'process';\n\nconst development: boolean = !process.env.NODE_ENV || process.env.NODE_ENV === 'development';\n\nexport default function isDev(): boolean {\n    return development;\n}\nconst ENV = isDev() ? require('./env.dev') : require('./env.prod');\n\nexport { ENV };\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport isDev from '../config/env';\n\nconst en = require('./en');\nconst fr = require('./fr');\n\nconst resources = {\n    en: {\n        translation: en\n    },\n    fr: {\n        translation: fr\n    }\n};\n\ni18n.use(initReactI18next)\n    .use(LanguageDetector)\n    .init({\n        resources,\n        supportedLngs: ['en', 'fr'],\n        fallbackLng: 'en',\n        keySeparator: '.',\n        interpolation: {\n            escapeValue: false\n        },\n        debug: isDev()\n    });\n\nexport default i18n;\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { Provider } from \"react-redux\"\nimport {  ConnectedRouter } from \"connected-react-router\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport { createBrowserHistory } from \"history\";\nimport App from \"./app\"\nimport store from \"./redux/store/store\"\nimport './i18n';\n\nconst history = createBrowserHistory()\n\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n    <App />\n    </ConnectedRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n)\nserviceWorker.unregister()\n","module.exports = __webpack_public_path__ + \"static/media/copy.5ae6ccfe.svg\";"],"sourceRoot":""}